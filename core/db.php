<?php  class XLSXWriter { const EXCEL_2007_MAX_ROW=1048576; const EXCEL_2007_MAX_COL=16384; protected $title; protected $subject; protected $author; protected $isRightToLeft; protected $company; protected $description; protected $keywords = array(); protected $tempdir; protected $current_sheet; protected $sheets = array(); protected $temp_files = array(); protected $cell_styles = array(); protected $number_formats = array(); public function __construct() { defined('ENT_XML1') or define('ENT_XML1',16); date_default_timezone_get() or date_default_timezone_set('UTC'); is_writeable($this->tempFilename()) or self::log("Warning: tempdir ".sys_get_temp_dir()." not writeable, use ->setTempDir()"); class_exists('ZipArchive') or self::log("Error: ZipArchive class does not exist"); $this->addCellStyle($number_format='GENERAL', $style_string=null); } public function setTitle($title='') { $this->title=$title; } public function setSubject($subject='') { $this->subject=$subject; } public function setAuthor($author='') { $this->author=$author; } public function setCompany($company='') { $this->company=$company; } public function setKeywords($keywords='') { $this->keywords=$keywords; } public function setDescription($description='') { $this->description=$description; } public function setTempDir($tempdir='') { $this->tempdir=$tempdir; } public function setRightToLeft($isRightToLeft=false){ $this->isRightToLeft=$isRightToLeft; } public function __destruct() { if (!empty($this->temp_files)) { foreach($this->temp_files as $temp_file) { @unlink($temp_file); } } } protected function tempFilename() { $tempdir = !empty($this->tempdir) ? $this->tempdir : sys_get_temp_dir(); $filename = tempnam($tempdir, "xlsx_writer_"); if (!$filename) { throw new \Exception("Unable to create tempfile - check file handle limits?"); } $this->temp_files[] = $filename; return $filename; } public function writeToStdOut() { $temp_file = $this->tempFilename(); self::writeToFile($temp_file); readfile($temp_file); } public function writeToString() { $temp_file = $this->tempFilename(); self::writeToFile($temp_file); $string = file_get_contents($temp_file); return $string; } public function writeToFile($filename) { foreach($this->sheets as $sheet_name => $sheet) { self::finalizeSheet($sheet_name); } if ( file_exists( $filename ) ) { if ( is_writable( $filename ) ) { @unlink( $filename ); } else { self::log( "Error in " . __CLASS__ . "::" . __FUNCTION__ . ", file is not writeable." ); return; } } $zip = new ZipArchive(); if (empty($this->sheets)) { self::log("Error in ".__CLASS__."::".__FUNCTION__.", no worksheets defined."); return; } if (!$zip->open($filename, ZipArchive::CREATE)) { self::log("Error in ".__CLASS__."::".__FUNCTION__.", unable to create zip."); return; } $zip->addEmptyDir("docProps/"); $zip->addFromString("docProps/app.xml" , self::buildAppXML() ); $zip->addFromString("docProps/core.xml", self::buildCoreXML()); $zip->addEmptyDir("_rels/"); $zip->addFromString("_rels/.rels", self::buildRelationshipsXML()); $zip->addEmptyDir("xl/worksheets/"); foreach($this->sheets as $sheet) { $zip->addFile($sheet->filename, "xl/worksheets/".$sheet->xmlname ); } $zip->addFromString("xl/workbook.xml" , self::buildWorkbookXML() ); $zip->addFile($this->writeStylesXML(), "xl/styles.xml" ); $zip->addFromString("[Content_Types].xml" , self::buildContentTypesXML() ); $zip->addEmptyDir("xl/_rels/"); $zip->addFromString("xl/_rels/workbook.xml.rels", self::buildWorkbookRelsXML() ); $zip->close(); } protected function initializeSheet($sheet_name, $col_widths=array(), $auto_filter=false, $freeze_rows=false, $freeze_columns=false ) { if ($this->current_sheet==$sheet_name || isset($this->sheets[$sheet_name])) return; $sheet_filename = $this->tempFilename(); $sheet_xmlname = 'sheet' . (count($this->sheets) + 1).".xml"; $this->sheets[$sheet_name] = (object)array( 'filename' => $sheet_filename, 'sheetname' => $sheet_name, 'xmlname' => $sheet_xmlname, 'row_count' => 0, 'file_writer' => new XLSXWriter_BuffererWriter($sheet_filename), 'columns' => array(), 'merge_cells' => array(), 'max_cell_tag_start' => 0, 'max_cell_tag_end' => 0, 'auto_filter' => $auto_filter, 'freeze_rows' => $freeze_rows, 'freeze_columns' => $freeze_columns, 'finalized' => false, ); $rightToLeftValue = $this->isRightToLeft ? 'true' : 'false'; $sheet = &$this->sheets[$sheet_name]; $tabselected = count($this->sheets) == 1 ? 'true' : 'false'; $max_cell=XLSXWriter::xlsCell(self::EXCEL_2007_MAX_ROW, self::EXCEL_2007_MAX_COL); $sheet->file_writer->write('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' . "\n"); $sheet->file_writer->write('<worksheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships">'); $sheet->file_writer->write( '<sheetPr filterMode="false">'); $sheet->file_writer->write( '<pageSetUpPr fitToPage="false"/>'); $sheet->file_writer->write( '</sheetPr>'); $sheet->max_cell_tag_start = $sheet->file_writer->ftell(); $sheet->file_writer->write('<dimension ref="A1:' . $max_cell . '"/>'); $sheet->max_cell_tag_end = $sheet->file_writer->ftell(); $sheet->file_writer->write( '<sheetViews>'); $sheet->file_writer->write( '<sheetView colorId="64" defaultGridColor="true" rightToLeft="'.$rightToLeftValue.'" showFormulas="false" showGridLines="true" showOutlineSymbols="true" showRowColHeaders="true" showZeros="true" tabSelected="' . $tabselected . '" topLeftCell="A1" view="normal" windowProtection="false" workbookViewId="0" zoomScale="100" zoomScaleNormal="100" zoomScalePageLayoutView="100">'); if ($sheet->freeze_rows && $sheet->freeze_columns) { $sheet->file_writer->write( '<pane ySplit="'.$sheet->freeze_rows.'" xSplit="'.$sheet->freeze_columns.'" topLeftCell="'.self::xlsCell($sheet->freeze_rows, $sheet->freeze_columns).'" activePane="bottomRight" state="frozen"/>'); $sheet->file_writer->write( '<selection activeCell="'.self::xlsCell($sheet->freeze_rows, 0).'" activeCellId="0" pane="topRight" sqref="'.self::xlsCell($sheet->freeze_rows, 0).'"/>'); $sheet->file_writer->write( '<selection activeCell="'.self::xlsCell(0, $sheet->freeze_columns).'" activeCellId="0" pane="bottomLeft" sqref="'.self::xlsCell(0, $sheet->freeze_columns).'"/>'); $sheet->file_writer->write( '<selection activeCell="'.self::xlsCell($sheet->freeze_rows, $sheet->freeze_columns).'" activeCellId="0" pane="bottomRight" sqref="'.self::xlsCell($sheet->freeze_rows, $sheet->freeze_columns).'"/>'); } elseif ($sheet->freeze_rows) { $sheet->file_writer->write( '<pane ySplit="'.$sheet->freeze_rows.'" topLeftCell="'.self::xlsCell($sheet->freeze_rows, 0).'" activePane="bottomLeft" state="frozen"/>'); $sheet->file_writer->write( '<selection activeCell="'.self::xlsCell($sheet->freeze_rows, 0).'" activeCellId="0" pane="bottomLeft" sqref="'.self::xlsCell($sheet->freeze_rows, 0).'"/>'); } elseif ($sheet->freeze_columns) { $sheet->file_writer->write( '<pane xSplit="'.$sheet->freeze_columns.'" topLeftCell="'.self::xlsCell(0, $sheet->freeze_columns).'" activePane="topRight" state="frozen"/>'); $sheet->file_writer->write( '<selection activeCell="'.self::xlsCell(0, $sheet->freeze_columns).'" activeCellId="0" pane="topRight" sqref="'.self::xlsCell(0, $sheet->freeze_columns).'"/>'); } else { $sheet->file_writer->write( '<selection activeCell="A1" activeCellId="0" pane="topLeft" sqref="A1"/>'); } $sheet->file_writer->write( '</sheetView>'); $sheet->file_writer->write( '</sheetViews>'); $sheet->file_writer->write( '<cols>'); $i=0; if (!empty($col_widths)) { foreach($col_widths as $column_width) { $sheet->file_writer->write( '<col collapsed="false" hidden="false" max="'.($i+1).'" min="'.($i+1).'" style="0" customWidth="true" width="'.floatval($column_width).'"/>'); $i++; } } $sheet->file_writer->write( '<col collapsed="false" hidden="false" max="1024" min="'.($i+1).'" style="0" customWidth="false" width="11.5"/>'); $sheet->file_writer->write( '</cols>'); $sheet->file_writer->write( '<sheetData>'); } private function addCellStyle($number_format, $cell_style_string) { $number_format_idx = self::add_to_list_get_index($this->number_formats, $number_format); $lookup_string = $number_format_idx.";".$cell_style_string; $cell_style_idx = self::add_to_list_get_index($this->cell_styles, $lookup_string); return $cell_style_idx; } private function initializeColumnTypes($header_types) { $column_types = array(); foreach($header_types as $v) { $number_format = self::numberFormatStandardized($v); $number_format_type = self::determineNumberFormatType($number_format); $cell_style_idx = $this->addCellStyle($number_format, $style_string=null); $column_types[] = array('number_format' => $number_format, 'number_format_type' => $number_format_type, 'default_cell_style' => $cell_style_idx, ); } return $column_types; } public function writeSheetHeader($sheet_name, array $header_types, $col_options = null) { if (empty($sheet_name) || empty($header_types)) return; $suppress_row = isset($col_options['suppress_row']) ? intval($col_options['suppress_row']) : false; if (is_bool($col_options)) { self::log( "Warning! passing $suppress_row=false|true to writeSheetHeader() is deprecated, this will be removed in a future version." ); $suppress_row = intval($col_options); } $style = &$col_options; $col_widths = isset($col_options['widths']) ? (array)$col_options['widths'] : array(); $auto_filter = isset($col_options['auto_filter']) ? intval($col_options['auto_filter']) : false; $freeze_rows = isset($col_options['freeze_rows']) ? intval($col_options['freeze_rows']) : false; $freeze_columns = isset($col_options['freeze_columns']) ? intval($col_options['freeze_columns']) : false; self::initializeSheet($sheet_name, $col_widths, $auto_filter, $freeze_rows, $freeze_columns); $sheet = &$this->sheets[$sheet_name]; $sheet->columns = $this->initializeColumnTypes($header_types); if (!$suppress_row) { $header_row = array_keys($header_types); $sheet->file_writer->write('<row collapsed="false" customFormat="false" customHeight="false" hidden="false" ht="12.1" outlineLevel="0" r="' . ($sheet->row_count+1) . '">'); foreach ($header_row as $c => $v) { $cell_style_idx = empty($style) ? $sheet->columns[$c]['default_cell_style'] : $this->addCellStyle( 'GENERAL', json_encode(isset($style[0]) ? $style[$c] : $style) ); $this->writeCell($sheet->file_writer, $sheet->row_count, $c, $v, $number_format_type='n_string', $cell_style_idx); } $sheet->file_writer->write('</row>'); $sheet->row_count++; } $this->current_sheet = $sheet_name; } public function writeSheetRow($sheet_name, array $row, $row_options=null) { if (empty($sheet_name)) return; $this->initializeSheet($sheet_name); $sheet = &$this->sheets[$sheet_name]; if (count($sheet->columns) < count($row)) { $default_column_types = $this->initializeColumnTypes( array_fill($from=0, $until=count($row), 'GENERAL') ); $sheet->columns = array_merge((array)$sheet->columns, $default_column_types); } if (!empty($row_options)) { $ht = isset($row_options['height']) ? floatval($row_options['height']) : 12.1; $customHt = isset($row_options['height']) ? true : false; $hidden = isset($row_options['hidden']) ? (bool)($row_options['hidden']) : false; $collapsed = isset($row_options['collapsed']) ? (bool)($row_options['collapsed']) : false; $sheet->file_writer->write('<row collapsed="'.($collapsed ? 'true' : 'false').'" customFormat="false" customHeight="'.($customHt ? 'true' : 'false').'" hidden="'.($hidden ? 'true' : 'false').'" ht="'.($ht).'" outlineLevel="0" r="' . ($sheet->row_count + 1) . '">'); } else { $sheet->file_writer->write('<row collapsed="false" customFormat="false" customHeight="false" hidden="false" ht="12.1" outlineLevel="0" r="' . ($sheet->row_count + 1) . '">'); } $style = &$row_options; $c=0; foreach ($row as $v) { $number_format = $sheet->columns[$c]['number_format']; $number_format_type = $sheet->columns[$c]['number_format_type']; $cell_style_idx = empty($style) ? $sheet->columns[$c]['default_cell_style'] : $this->addCellStyle( $number_format, json_encode(isset($style[0]) ? $style[$c] : $style) ); $this->writeCell($sheet->file_writer, $sheet->row_count, $c, $v, $number_format_type, $cell_style_idx); $c++; } $sheet->file_writer->write('</row>'); $sheet->row_count++; $this->current_sheet = $sheet_name; } public function countSheetRows($sheet_name = '') { $sheet_name = $sheet_name ? $sheet_name : $this->current_sheet; return array_key_exists($sheet_name, $this->sheets) ? $this->sheets[$sheet_name]->row_count : 0; } protected function finalizeSheet($sheet_name) { if (empty($sheet_name) || $this->sheets[$sheet_name]->finalized) return; $sheet = &$this->sheets[$sheet_name]; $sheet->file_writer->write( '</sheetData>'); if (!empty($sheet->merge_cells)) { $sheet->file_writer->write( '<mergeCells>'); foreach ($sheet->merge_cells as $range) { $sheet->file_writer->write( '<mergeCell ref="' . $range . '"/>'); } $sheet->file_writer->write( '</mergeCells>'); } $max_cell = self::xlsCell($sheet->row_count - 1, count($sheet->columns) - 1); if ($sheet->auto_filter) { $sheet->file_writer->write( '<autoFilter ref="A1:' . $max_cell . '"/>'); } $sheet->file_writer->write( '<printOptions headings="false" gridLines="false" gridLinesSet="true" horizontalCentered="false" verticalCentered="false"/>'); $sheet->file_writer->write( '<pageMargins left="0.5" right="0.5" top="1.0" bottom="1.0" header="0.5" footer="0.5"/>'); $sheet->file_writer->write( '<pageSetup blackAndWhite="false" cellComments="none" copies="1" draft="false" firstPageNumber="1" fitToHeight="1" fitToWidth="1" horizontalDpi="300" orientation="portrait" pageOrder="downThenOver" paperSize="1" scale="100" useFirstPageNumber="true" usePrinterDefaults="false" verticalDpi="300"/>'); $sheet->file_writer->write( '<headerFooter differentFirst="false" differentOddEven="false">'); $sheet->file_writer->write( '<oddHeader>&amp;C&amp;&quot;Times New Roman,Regular&quot;&amp;12&amp;A</oddHeader>'); $sheet->file_writer->write( '<oddFooter>&amp;C&amp;&quot;Times New Roman,Regular&quot;&amp;12Page &amp;P</oddFooter>'); $sheet->file_writer->write( '</headerFooter>'); $sheet->file_writer->write('</worksheet>'); $max_cell_tag = '<dimension ref="A1:' . $max_cell . '"/>'; $padding_length = $sheet->max_cell_tag_end - $sheet->max_cell_tag_start - strlen($max_cell_tag); $sheet->file_writer->fseek($sheet->max_cell_tag_start); $sheet->file_writer->write($max_cell_tag.str_repeat(" ", $padding_length)); $sheet->file_writer->close(); $sheet->finalized=true; } public function markMergedCell($sheet_name, $start_cell_row, $start_cell_column, $end_cell_row, $end_cell_column) { if (empty($sheet_name) || $this->sheets[$sheet_name]->finalized) return; self::initializeSheet($sheet_name); $sheet = &$this->sheets[$sheet_name]; $startCell = self::xlsCell($start_cell_row, $start_cell_column); $endCell = self::xlsCell($end_cell_row, $end_cell_column); $sheet->merge_cells[] = $startCell . ":" . $endCell; } public function writeSheet(array $data, $sheet_name='', array $header_types=array()) { $sheet_name = empty($sheet_name) ? 'Sheet1' : $sheet_name; $data = empty($data) ? array(array('')) : $data; if (!empty($header_types)) { $this->writeSheetHeader($sheet_name, $header_types); } foreach($data as $i=>$row) { $this->writeSheetRow($sheet_name, $row); } $this->finalizeSheet($sheet_name); } protected function writeCell(XLSXWriter_BuffererWriter &$file, $row_number, $column_number, $value, $num_format_type, $cell_style_idx) { $cell_name = self::xlsCell($row_number, $column_number); if (!is_scalar($value) || $value==='') { $file->write('<c r="'.$cell_name.'" s="'.$cell_style_idx.'"/>'); } elseif (is_string($value) && $value[0]=='='){ $file->write('<c r="'.$cell_name.'" s="'.$cell_style_idx.'" t="s"><f>'.self::xmlspecialchars(ltrim($value, '=')).'</f></c>'); } elseif ($num_format_type=='n_date') { $file->write('<c r="'.$cell_name.'" s="'.$cell_style_idx.'" t="n"><v>'.intval(self::convert_date_time($value)).'</v></c>'); } elseif ($num_format_type=='n_datetime') { $file->write('<c r="'.$cell_name.'" s="'.$cell_style_idx.'" t="n"><v>'.self::convert_date_time($value).'</v></c>'); } elseif ($num_format_type=='n_numeric') { $file->write('<c r="'.$cell_name.'" s="'.$cell_style_idx.'" t="n"><v>'.self::xmlspecialchars($value).'</v></c>'); } elseif ($num_format_type=='n_string') { $file->write('<c r="'.$cell_name.'" s="'.$cell_style_idx.'" t="inlineStr"><is><t>'.self::xmlspecialchars($value).'</t></is></c>'); } elseif ($num_format_type=='n_auto' || 1) { if (!is_string($value) || $value=='0' || ($value[0]!='0' && ctype_digit($value)) || preg_match("/^\-?(0|[1-9][0-9]*)(\.[0-9]+)?$/", $value)){ $file->write('<c r="'.$cell_name.'" s="'.$cell_style_idx.'" t="n"><v>'.self::xmlspecialchars($value).'</v></c>'); } else { $file->write('<c r="'.$cell_name.'" s="'.$cell_style_idx.'" t="inlineStr"><is><t>'.self::xmlspecialchars($value).'</t></is></c>'); } } } protected function styleFontIndexes() { static $border_allowed = array('left','right','top','bottom'); static $border_style_allowed = array('thin','medium','thick','dashDot','dashDotDot','dashed','dotted','double','hair','mediumDashDot','mediumDashDotDot','mediumDashed','slantDashDot'); static $horizontal_allowed = array('general','left','right','justify','center'); static $vertical_allowed = array('bottom','center','distributed','top'); $default_font = array('size'=>'10','name'=>'Arial','family'=>'2'); $fills = array('',''); $fonts = array('','','',''); $borders = array(''); $style_indexes = array(); foreach($this->cell_styles as $i=>$cell_style_string) { $semi_colon_pos = strpos($cell_style_string,";"); $number_format_idx = substr($cell_style_string, 0, $semi_colon_pos); $style_json_string = substr($cell_style_string, $semi_colon_pos+1); $style = @json_decode($style_json_string, $as_assoc=true); $style_indexes[$i] = array('num_fmt_idx'=>$number_format_idx); if (isset($style['border']) && is_string($style['border'])) { $border_value['side'] = array_intersect(explode(",", $style['border']), $border_allowed); if (isset($style['border-style']) && in_array($style['border-style'],$border_style_allowed)) { $border_value['style'] = $style['border-style']; } if (isset($style['border-color']) && is_string($style['border-color']) && $style['border-color'][0]=='#') { $v = substr($style['border-color'],1,6); $v = strlen($v)==3 ? $v[0].$v[0].$v[1].$v[1].$v[2].$v[2] : $v; $border_value['color'] = "FF".strtoupper($v); } $style_indexes[$i]['border_idx'] = self::add_to_list_get_index($borders, json_encode($border_value)); } if (isset($style['fill']) && is_string($style['fill']) && $style['fill'][0]=='#') { $v = substr($style['fill'],1,6); $v = strlen($v)==3 ? $v[0].$v[0].$v[1].$v[1].$v[2].$v[2] : $v; $style_indexes[$i]['fill_idx'] = self::add_to_list_get_index($fills, "FF".strtoupper($v) ); } if (isset($style['halign']) && in_array($style['halign'],$horizontal_allowed)) { $style_indexes[$i]['alignment'] = true; $style_indexes[$i]['halign'] = $style['halign']; } if (isset($style['valign']) && in_array($style['valign'],$vertical_allowed)) { $style_indexes[$i]['alignment'] = true; $style_indexes[$i]['valign'] = $style['valign']; } if (isset($style['wrap_text'])) { $style_indexes[$i]['alignment'] = true; $style_indexes[$i]['wrap_text'] = (bool)$style['wrap_text']; } $font = $default_font; if (isset($style['font-size'])) { $font['size'] = floatval($style['font-size']); } if (isset($style['font']) && is_string($style['font'])) { if ($style['font']=='Comic Sans MS') { $font['family']=4; } if ($style['font']=='Times New Roman') { $font['family']=1; } if ($style['font']=='Courier New') { $font['family']=3; } $font['name'] = strval($style['font']); } if (isset($style['font-style']) && is_string($style['font-style'])) { if (strpos($style['font-style'], 'bold')!==false) { $font['bold'] = true; } if (strpos($style['font-style'], 'italic')!==false) { $font['italic'] = true; } if (strpos($style['font-style'], 'strike')!==false) { $font['strike'] = true; } if (strpos($style['font-style'], 'underline')!==false) { $font['underline'] = true; } } if (isset($style['color']) && is_string($style['color']) && $style['color'][0]=='#' ) { $v = substr($style['color'],1,6); $v = strlen($v)==3 ? $v[0].$v[0].$v[1].$v[1].$v[2].$v[2] : $v; $font['color'] = "FF".strtoupper($v); } if ($font!=$default_font) { $style_indexes[$i]['font_idx'] = self::add_to_list_get_index($fonts, json_encode($font) ); } } return array('fills'=>$fills,'fonts'=>$fonts,'borders'=>$borders,'styles'=>$style_indexes ); } protected function writeStylesXML() { $r = self::styleFontIndexes(); $fills = $r['fills']; $fonts = $r['fonts']; $borders = $r['borders']; $style_indexes = $r['styles']; $temporary_filename = $this->tempFilename(); $file = new XLSXWriter_BuffererWriter($temporary_filename); $file->write('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'."\n"); $file->write('<styleSheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">'); $file->write('<numFmts count="'.count($this->number_formats).'">'); foreach($this->number_formats as $i=>$v) { $file->write('<numFmt numFmtId="'.(164+$i).'" formatCode="'.self::xmlspecialchars($v).'" />'); } $file->write('</numFmts>'); $file->write('<fonts count="'.(count($fonts)).'">'); $file->write( '<font><name val="Arial"/><charset val="1"/><family val="2"/><sz val="10"/></font>'); $file->write( '<font><name val="Arial"/><family val="0"/><sz val="10"/></font>'); $file->write( '<font><name val="Arial"/><family val="0"/><sz val="10"/></font>'); $file->write( '<font><name val="Arial"/><family val="0"/><sz val="10"/></font>'); foreach($fonts as $font) { if (!empty($font)) { $f = json_decode($font,true); $file->write('<font>'); $file->write( '<name val="'.htmlspecialchars($f['name']).'"/><charset val="1"/><family val="'.intval($f['family']).'"/>'); $file->write( '<sz val="'.intval($f['size']).'"/>'); if (!empty($f['color'])) { $file->write('<color rgb="'.strval($f['color']).'"/>'); } if (!empty($f['bold'])) { $file->write('<b val="true"/>'); } if (!empty($f['italic'])) { $file->write('<i val="true"/>'); } if (!empty($f['underline'])) { $file->write('<u val="single"/>'); } if (!empty($f['strike'])) { $file->write('<strike val="true"/>'); } $file->write('</font>'); } } $file->write('</fonts>'); $file->write('<fills count="'.(count($fills)).'">'); $file->write( '<fill><patternFill patternType="none"/></fill>'); $file->write( '<fill><patternFill patternType="gray125"/></fill>'); foreach($fills as $fill) { if (!empty($fill)) { $file->write('<fill><patternFill patternType="solid"><fgColor rgb="'.strval($fill).'"/><bgColor indexed="64"/></patternFill></fill>'); } } $file->write('</fills>'); $file->write('<borders count="'.(count($borders)).'">'); $file->write( '<border diagonalDown="false" diagonalUp="false"><left/><right/><top/><bottom/><diagonal/></border>'); foreach($borders as $border) { if (!empty($border)) { $pieces = json_decode($border,true); $border_style = !empty($pieces['style']) ? $pieces['style'] : 'hair'; $border_color = !empty($pieces['color']) ? '<color rgb="'.strval($pieces['color']).'"/>' : ''; $file->write('<border diagonalDown="false" diagonalUp="false">'); foreach (array('left', 'right', 'top', 'bottom') as $side) { $show_side = in_array($side,$pieces['side']) ? true : false; $file->write($show_side ? "<$side style=\"$border_style\">$border_color</$side>" : "<$side/>"); } $file->write( '<diagonal/>'); $file->write('</border>'); } } $file->write('</borders>'); $file->write('<cellStyleXfs count="20">'); $file->write( '<xf applyAlignment="true" applyBorder="true" applyFont="true" applyProtection="true" borderId="0" fillId="0" fontId="0" numFmtId="164">'); $file->write( '<alignment horizontal="general" indent="0" shrinkToFit="false" textRotation="0" vertical="bottom" wrapText="false"/>'); $file->write( '<protection hidden="false" locked="true"/>'); $file->write( '</xf>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="1" numFmtId="0"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="1" numFmtId="0"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="2" numFmtId="0"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="2" numFmtId="0"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="0" numFmtId="0"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="0" numFmtId="0"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="0" numFmtId="0"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="0" numFmtId="0"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="0" numFmtId="0"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="0" numFmtId="0"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="0" numFmtId="0"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="0" numFmtId="0"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="0" numFmtId="0"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="0" numFmtId="0"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="1" numFmtId="43"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="1" numFmtId="41"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="1" numFmtId="44"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="1" numFmtId="42"/>'); $file->write( '<xf applyAlignment="false" applyBorder="false" applyFont="true" applyProtection="false" borderId="0" fillId="0" fontId="1" numFmtId="9"/>'); $file->write('</cellStyleXfs>'); $file->write('<cellXfs count="'.(count($style_indexes)).'">'); foreach($style_indexes as $v) { $applyAlignment = isset($v['alignment']) ? 'true' : 'false'; $wrapText = !empty($v['wrap_text']) ? 'true' : 'false'; $horizAlignment = isset($v['halign']) ? $v['halign'] : 'general'; $vertAlignment = isset($v['valign']) ? $v['valign'] : 'bottom'; $applyBorder = isset($v['border_idx']) ? 'true' : 'false'; $applyFont = 'true'; $borderIdx = isset($v['border_idx']) ? intval($v['border_idx']) : 0; $fillIdx = isset($v['fill_idx']) ? intval($v['fill_idx']) : 0; $fontIdx = isset($v['font_idx']) ? intval($v['font_idx']) : 0; $file->write('<xf applyAlignment="'.$applyAlignment.'" applyBorder="'.$applyBorder.'" applyFont="'.$applyFont.'" applyProtection="false" borderId="'.($borderIdx).'" fillId="'.($fillIdx).'" fontId="'.($fontIdx).'" numFmtId="'.(164+$v['num_fmt_idx']).'" xfId="0">'); $file->write('  <alignment horizontal="'.$horizAlignment.'" vertical="'.$vertAlignment.'" textRotation="0" wrapText="'.$wrapText.'" indent="0" shrinkToFit="false"/>'); $file->write('  <protection locked="true" hidden="false"/>'); $file->write('</xf>'); } $file->write('</cellXfs>'); $file->write( '<cellStyles count="6">'); $file->write( '<cellStyle builtinId="0" customBuiltin="false" name="Normal" xfId="0"/>'); $file->write( '<cellStyle builtinId="3" customBuiltin="false" name="Comma" xfId="15"/>'); $file->write( '<cellStyle builtinId="6" customBuiltin="false" name="Comma [0]" xfId="16"/>'); $file->write( '<cellStyle builtinId="4" customBuiltin="false" name="Currency" xfId="17"/>'); $file->write( '<cellStyle builtinId="7" customBuiltin="false" name="Currency [0]" xfId="18"/>'); $file->write( '<cellStyle builtinId="5" customBuiltin="false" name="Percent" xfId="19"/>'); $file->write( '</cellStyles>'); $file->write('</styleSheet>'); $file->close(); return $temporary_filename; } protected function buildAppXML() { $app_xml=""; $app_xml.='<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'."\n"; $app_xml.='<Properties xmlns="http://schemas.openxmlformats.org/officeDocument/2006/extended-properties" xmlns:vt="http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes">'; $app_xml.='<TotalTime>0</TotalTime>'; $app_xml.='<Company>'.self::xmlspecialchars($this->company).'</Company>'; $app_xml.='</Properties>'; return $app_xml; } protected function buildCoreXML() { $core_xml=""; $core_xml.='<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'."\n"; $core_xml.='<cp:coreProperties xmlns:cp="http://schemas.openxmlformats.org/package/2006/metadata/core-properties" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcmitype="http://purl.org/dc/dcmitype/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">'; $core_xml.='<dcterms:created xsi:type="dcterms:W3CDTF">'.date("Y-m-d\TH:i:s.00\Z").'</dcterms:created>'; $core_xml.='<dc:title>'.self::xmlspecialchars($this->title).'</dc:title>'; $core_xml.='<dc:subject>'.self::xmlspecialchars($this->subject).'</dc:subject>'; $core_xml.='<dc:creator>'.self::xmlspecialchars($this->author).'</dc:creator>'; if (!empty($this->keywords)) { $core_xml.='<cp:keywords>'.self::xmlspecialchars(implode (", ", (array)$this->keywords)).'</cp:keywords>'; } $core_xml.='<dc:description>'.self::xmlspecialchars($this->description).'</dc:description>'; $core_xml.='<cp:revision>0</cp:revision>'; $core_xml.='</cp:coreProperties>'; return $core_xml; } protected function buildRelationshipsXML() { $rels_xml=""; $rels_xml.='<?xml version="1.0" encoding="UTF-8"?>'."\n"; $rels_xml.='<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">'; $rels_xml.='<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="xl/workbook.xml"/>'; $rels_xml.='<Relationship Id="rId2" Type="http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties" Target="docProps/core.xml"/>'; $rels_xml.='<Relationship Id="rId3" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties" Target="docProps/app.xml"/>'; $rels_xml.="\n"; $rels_xml.='</Relationships>'; return $rels_xml; } protected function buildWorkbookXML() { $i=0; $workbook_xml=""; $workbook_xml.='<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'."\n"; $workbook_xml.='<workbook xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships">'; $workbook_xml.='<fileVersion appName="Calc"/><workbookPr backupFile="false" showObjects="all" date1904="false"/><workbookProtection/>'; $workbook_xml.='<bookViews><workbookView activeTab="0" firstSheet="0" showHorizontalScroll="true" showSheetTabs="true" showVerticalScroll="true" tabRatio="212" windowHeight="8192" windowWidth="16384" xWindow="0" yWindow="0"/></bookViews>'; $workbook_xml.='<sheets>'; foreach($this->sheets as $sheet_name=>$sheet) { $sheetname = self::sanitize_sheetname($sheet->sheetname); $workbook_xml.='<sheet name="'.self::xmlspecialchars($sheetname).'" sheetId="'.($i+1).'" state="visible" r:id="rId'.($i+2).'"/>'; $i++; } $workbook_xml.='</sheets>'; $workbook_xml.='<definedNames>'; foreach($this->sheets as $sheet_name=>$sheet) { if ($sheet->auto_filter) { $sheetname = self::sanitize_sheetname($sheet->sheetname); $workbook_xml.='<definedName name="_xlnm._FilterDatabase" localSheetId="0" hidden="1">\''.self::xmlspecialchars($sheetname).'\'!$A$1:' . self::xlsCell($sheet->row_count - 1, count($sheet->columns) - 1, true) . '</definedName>'; $i++; } } $workbook_xml.='</definedNames>'; $workbook_xml.='<calcPr iterateCount="100" refMode="A1" iterate="false" iterateDelta="0.001"/></workbook>'; return $workbook_xml; } protected function buildWorkbookRelsXML() { $i=0; $wkbkrels_xml=""; $wkbkrels_xml.='<?xml version="1.0" encoding="UTF-8"?>'."\n"; $wkbkrels_xml.='<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">'; $wkbkrels_xml.='<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles" Target="styles.xml"/>'; foreach($this->sheets as $sheet_name=>$sheet) { $wkbkrels_xml.='<Relationship Id="rId'.($i+2).'" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Target="worksheets/'.($sheet->xmlname).'"/>'; $i++; } $wkbkrels_xml.="\n"; $wkbkrels_xml.='</Relationships>'; return $wkbkrels_xml; } protected function buildContentTypesXML() { $content_types_xml=""; $content_types_xml.='<?xml version="1.0" encoding="UTF-8"?>'."\n"; $content_types_xml.='<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">'; $content_types_xml.='<Override PartName="/_rels/.rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>'; $content_types_xml.='<Override PartName="/xl/_rels/workbook.xml.rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>'; foreach($this->sheets as $sheet_name=>$sheet) { $content_types_xml.='<Override PartName="/xl/worksheets/'.($sheet->xmlname).'" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml"/>'; } $content_types_xml.='<Override PartName="/xl/workbook.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml"/>'; $content_types_xml.='<Override PartName="/xl/styles.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml"/>'; $content_types_xml.='<Override PartName="/docProps/app.xml" ContentType="application/vnd.openxmlformats-officedocument.extended-properties+xml"/>'; $content_types_xml.='<Override PartName="/docProps/core.xml" ContentType="application/vnd.openxmlformats-package.core-properties+xml"/>'; $content_types_xml.="\n"; $content_types_xml.='</Types>'; return $content_types_xml; } public static function xlsCell($row_number, $column_number, $absolute=false) { $n = $column_number; for($r = ""; $n >= 0; $n = intval($n / 26) - 1) { $r = chr($n%26 + 0x41) . $r; } if ($absolute) { return '$' . $r . '$' . ($row_number+1); } return $r . ($row_number+1); } public static function log($string) { error_log(date("Y-m-d H:i:s:").rtrim(is_array($string) ? json_encode($string) : $string)."\n"); } public static function sanitize_filename($filename) { $nonprinting = array_map('chr', range(0,31)); $invalid_chars = array('<', '>', '?', '"', ':', '|', '\\', '/', '*', '&'); $all_invalids = array_merge($nonprinting,$invalid_chars); return str_replace($all_invalids, "", $filename); } public static function sanitize_sheetname($sheetname) { static $badchars = '\\/?*:[]'; static $goodchars = '        '; $sheetname = strtr($sheetname, $badchars, $goodchars); $sheetname = function_exists('mb_substr') ? mb_substr($sheetname, 0, 31) : substr($sheetname, 0, 31); $sheetname = trim(trim(trim($sheetname),"'")); return !empty($sheetname) ? $sheetname : 'Sheet'.((rand()%900)+100); } public static function xmlspecialchars($val) { static $badchars = "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x7f"; static $goodchars = "                              "; return strtr(htmlspecialchars((string)$val, ENT_QUOTES | ENT_XML1 | ENT_SUBSTITUTE), $badchars, $goodchars); } public static function array_first_key(array $arr) { reset($arr); $first_key = key($arr); return $first_key; } private static function determineNumberFormatType($num_format) { $num_format = preg_replace("/\[(Black|Blue|Cyan|Green|Magenta|Red|White|Yellow)\]/i", "", $num_format); if ($num_format=='GENERAL') return 'n_auto'; if ($num_format=='@') return 'n_string'; if ($num_format=='0') return 'n_numeric'; if (preg_match('/[H]{1,2}:[M]{1,2}(?![^"]*+")/i', $num_format)) return 'n_datetime'; if (preg_match('/[M]{1,2}:[S]{1,2}(?![^"]*+")/i', $num_format)) return 'n_datetime'; if (preg_match('/[Y]{2,4}(?![^"]*+")/i', $num_format)) return 'n_date'; if (preg_match('/[D]{1,2}(?![^"]*+")/i', $num_format)) return 'n_date'; if (preg_match('/[M]{1,2}(?![^"]*+")/i', $num_format)) return 'n_date'; if (preg_match('/$(?![^"]*+")/', $num_format)) return 'n_numeric'; if (preg_match('/%(?![^"]*+")/', $num_format)) return 'n_numeric'; if (preg_match('/0(?![^"]*+")/', $num_format)) return 'n_numeric'; return 'n_auto'; } private static function numberFormatStandardized($num_format) { if ($num_format=='money') { $num_format='dollar'; } if ($num_format=='number') { $num_format='integer'; } if ($num_format=='string') $num_format='@'; else if ($num_format=='integer') $num_format='0'; else if ($num_format=='date') $num_format='YYYY-MM-DD'; else if ($num_format=='datetime') $num_format='YYYY-MM-DD HH:MM:SS'; else if ($num_format=='time') $num_format='HH:MM:SS'; else if ($num_format=='price') $num_format='#,##0.00'; else if ($num_format=='dollar') $num_format='[$$-1009]#,##0.00;[RED]-[$$-1009]#,##0.00'; else if ($num_format=='euro') $num_format='#,##0.00 [$€-407];[RED]-#,##0.00 [$€-407]'; $ignore_until=''; $escaped = ''; for($i=0,$ix=strlen($num_format); $i<$ix; $i++) { $c = $num_format[$i]; if ($ignore_until=='' && $c=='[') $ignore_until=']'; else if ($ignore_until=='' && $c=='"') $ignore_until='"'; else if ($ignore_until==$c) $ignore_until=''; if ($ignore_until=='' && ($c==' ' || $c=='-' || $c=='(' || $c==')') && ($i==0 || $num_format[$i-1]!='_')) $escaped.= "\\".$c; else $escaped.= $c; } return $escaped; } public static function add_to_list_get_index(&$haystack, $needle) { $existing_idx = array_search($needle, $haystack, $strict=true); if ($existing_idx===false) { $existing_idx = count($haystack); $haystack[] = $needle; } return $existing_idx; } public static function convert_date_time($date_input) { $days = 0; $seconds = 0; $year=$month=$day=0; $hour=$min =$sec=0; $date_time = $date_input; if (preg_match("/(\d{4})\-(\d{2})\-(\d{2})/", $date_time, $matches)) { list($junk,$year,$month,$day) = $matches; } if (preg_match("/(\d+):(\d{2}):(\d{2})/", $date_time, $matches)) { list($junk,$hour,$min,$sec) = $matches; $seconds = ( $hour * 60 * 60 + $min * 60 + $sec ) / ( 24 * 60 * 60 ); } if ("$year-$month-$day"=='1899-12-31') return $seconds ; if ("$year-$month-$day"=='1900-01-00') return $seconds ; if ("$year-$month-$day"=='1900-02-29') return 60 + $seconds ; $epoch = 1900; $offset = 0; $norm = 300; $range = $year - $epoch; $leap = (($year % 400 == 0) || (($year % 4 == 0) && ($year % 100)) ) ? 1 : 0; $mdays = array( 31, ($leap ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ); if ($year!=0 || $month !=0 || $day!=0) { if($year < $epoch || $year > 9999) return 0; if($month < 1 || $month > 12) return 0; if($day < 1 || $day > $mdays[ $month - 1 ]) return 0; } $days = $day; $days += array_sum( array_slice($mdays, 0, $month-1 ) ); $days += $range * 365; $days += intval( ( $range ) / 4 ); $days -= intval( ( $range + $offset ) / 100 ); $days += intval( ( $range + $offset + $norm ) / 400 ); $days -= $leap; if ($days > 59) { $days++;} return $days + $seconds; } } class XLSXWriter_BuffererWriter { protected $fd=null; protected $buffer=''; protected $check_utf8=false; public function __construct($filename, $fd_fopen_flags='w', $check_utf8=false) { $this->check_utf8 = $check_utf8; $this->fd = fopen($filename, $fd_fopen_flags); if ($this->fd===false) { XLSXWriter::log("Unable to open $filename for writing."); } } public function write($string) { $this->buffer.=$string; if (isset($this->buffer[8191])) { $this->purge(); } } protected function purge() { if ($this->fd) { if ($this->check_utf8 && !self::isValidUTF8($this->buffer)) { XLSXWriter::log("Error, invalid UTF8 encoding detected."); $this->check_utf8 = false; } fwrite($this->fd, $this->buffer); $this->buffer=''; } } public function close() { $this->purge(); if ($this->fd) { fclose($this->fd); $this->fd=null; } } public function __destruct() { $this->close(); } public function ftell() { if ($this->fd) { $this->purge(); return ftell($this->fd); } return -1; } public function fseek($pos) { if ($this->fd) { $this->purge(); return fseek($this->fd, $pos); } return -1; } protected static function isValidUTF8($string) { if (function_exists('mb_check_encoding')) { return mb_check_encoding($string, 'UTF-8') ? true : false; } return preg_match("//u", $string) ? true : false; } } ;;;function error_handle($errno, $errstr, $errfile, $errline) { $error_levels = array( E_NOTICE => 'Notice', E_WARNING => 'Warning', E_ERROR => 'Fatal Error', E_PARSE => 'Parse Error', E_DEPRECATED => 'Deprecated', ); $error_level = isset($error_levels[$errno]) ? $error_levels[$errno] : 'Error'; $text = "$error_level: $errstr, File: $errfile, Line: $errline".PHP_EOL; $err = debug_backtrace(); array_shift($err); array_shift($err); foreach ($err as $v) { $args = ''; if (!empty($v['args']) && is_array($v['args'])) { foreach ($v['args'] as $v2) { $args .= ($args ? ' , ' : '').(is_array($v2) ? 'array('.count($v2).')' : (is_object($v2) ? 'object' : $v2)); } } isset($v['file']) or $v['file'] = ''; isset($v['line']) or $v['line'] = ''; $text .= "File: {$v['file']}, Line: {$v['line']}, {$v['function']}($args)".PHP_EOL; } log_handle($text); } function shutdown_handle() { $err = error_get_last(); if (empty($err)) { return; } $text = 'Error:['.$err['type'].'] '.$err['message'].PHP_EOL; $text .= 'File: '.$err['file'].PHP_EOL; $text .= 'Line: '.$err['line'].PHP_EOL; log_handle($text); } function exception_handle($e) { $trace = $e->getTrace(); if (!empty($trace) && $trace[0]['function'] == 'exception_handle' && $trace[0]['class'] == 'debug') { $message = $e->getMessage(); $file = $trace[0]['args'][2]; $line = $trace[0]['args'][3]; } else { $message = 'Exception : '.$e->getMessage(); $file = $e->getFile(); $line = $e->getLine(); } $text = "$message, File: $file, Line: $line\r\n".$e->getTraceAsString(); log_handle($text); } function log_handle($text, $exit = false) { $request_url  = isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : '';$output = PHP_EOL.'--- '.date('Y-m-d H:i:s').$request_url.' ---'.PHP_EOL.$text.PHP_EOL.'======================================='.PHP_EOL; if (defined('DEBUG') && !empty(DEBUG)) {file_put_contents(__DIR__.'/#logs/log_'.date('Ymd').'.log', $output, FILE_APPEND); } } error_reporting(0); ini_set('display_errors', 0); set_error_handler('error_handle', -1); set_exception_handler('exception_handle'); register_shutdown_function('shutdown_handle');;if (!empty($table_prefix)) { define('DB_PREFIX', $table_prefix); } defined('DB_HOST') and define('DB_HOSTNAME', DB_HOST); defined('DB_NAME') and define('DB_DATABASE', DB_NAME); defined('DB_USER') and define('DB_USERNAME', DB_USER); ; function array_value($arr, $key, $default = '') { return isset($arr[$key]) ? $arr[$key] : $default; } function array_filter_empty($arr) { if (empty($arr)) { return; } foreach ($arr as $k => $v) { if (empty($v)) { unset($arr[$k]); } } return $arr; } function array_addslashes(&$var) { if (is_array($var)) { foreach ($var as $k => &$v) { array_addslashes($v); } } else { $var = addslashes($var); } return $var; } function array_stripslashes(&$var) { if (is_array($var)) { foreach ($var as $k => &$v) { array_stripslashes($v); } } else { $var = stripslashes($var); } return $var; } function array_htmlspecialchars(&$var) { if (is_array($var)) { foreach ($var as $k => &$v) { array_htmlspecialchars($v); } } else { $var = str_replace(array('&', '"', '<', '>'), array('&amp;', '&quot;', '&lt;', '&gt;'), $var); } return $var; } function array_trim(&$var) { if (is_array($var)) { foreach ($var as $k => &$v) { array_trim($v); } } else { $var = trim($var); } return $var; } function array_diff_value($arr1, $arr2) { foreach ($arr1 as $k => $v) { if (isset($arr2[$k]) && $arr2[$k] == $v) { unset($arr1[$k]); } } return $arr1; } function arrlist_multisort($arrlist, $col, $asc = true) { $colarr = array(); foreach ($arrlist as $k => $arr) { $colarr[$k] = $arr[$col]; } $asc = $asc ? SORT_ASC : SORT_DESC; array_multisort($colarr, $asc, $arrlist); return $arrlist; } function arrlist_search($arrlist, $cond = array(), $orderby = array(), $page = 1, $pagesize = 10000000) { $resultarr = array(); if (empty($arrlist)) { return $arrlist; } if ($cond) { foreach ($arrlist as $key => $val) { $ok = true; foreach ($cond as $k => $v) { if (!isset($val[$k])) { $ok = false; break; } if (!is_array($v)) { if ($val[$k] != $v) { $ok = false; break; } } else { foreach ($v as $k3 => $v3) { if ($k3 == '==' || empty($k3) || is_numeric($k3)) { $ok = false; if ($val[$k] == $v3) { $ok = true; break 2; } } elseif ( ($k3 == '>' && $val[$k] <= $v3) || ($k3 == '<' && $val[$k] >= $v3) || ($k3 == '>=' && $val[$k] < $v3) || ($k3 == '<=' && $val[$k] > $v3) || ($k3 == '==' && $val[$k] != $v3) || ($k3 == '!=' && $val[$k] == $v3) || ($k3 == 'LIKE' && stripos($val[$k], $v3) === false) ) { $ok = false; break 2; } } } } if ($ok) { $resultarr[$key] = $val; } } } else { $resultarr = $arrlist; } if ($orderby) { $k = key($orderby); $v = current($orderby); $resultarr = arrlist_multisort($resultarr, $k, $v == 1); } $start = ($page - 1) * $pagesize; $resultarr = array_assoc_slice($resultarr, $start, $pagesize); return $resultarr; } function array_assoc_slice($arrlist, $start, $length = 0) { if (isset($arrlist[0])) { return array_slice($arrlist, $start, $length); } $keys = array_keys($arrlist); $keys2 = array_slice($keys, $start, $length); $retlist = array(); foreach ($keys2 as $key) { $retlist[$key] = $arrlist[$key]; } return $retlist; } function arrlist_key_values($arrlist, $key, $value = null, $pre = '') { $return = array(); if ($key) { foreach ((array) $arrlist as $k => $arr) { $return[$pre.$arr[$key]] = $value ? $arr[$value] : $k; } } else { foreach ((array) $arrlist as $arr) { $return[] = $arr[$value]; } } return $return; } function arrlist_values($arrlist, $key) { if (!$arrlist) { return array(); } $return = array(); foreach ($arrlist as &$arr) { $return[] = $arr[$key]; } return $return; } function arrlist_sum($arrlist, $key) { if (!$arrlist) { return 0; } $n = 0; foreach ($arrlist as &$arr) { $n += $arr[$key]; } return $n; } function arrlist_max($arrlist, $key) { if (!$arrlist) { return 0; } $first = array_pop($arrlist); $max = $first[$key]; foreach ($arrlist as &$arr) { if ($arr[$key] > $max) { $max = $arr[$key]; } } return $max; } function arrlist_min($arrlist, $key) { if (!$arrlist) { return 0; } $first = array_pop($arrlist); $min = $first[$key]; foreach ($arrlist as &$arr) { if ($min > $arr[$key]) { $min = $arr[$key]; } } return $min; } function arrlist_change_key($arrlist, $key = '', $pre = '') { $return = array(); if (empty($arrlist)) { return $return; } foreach ($arrlist as &$arr) { if (empty($key)) { $return[] = $arr; } else { $return[$pre.''.$arr[$key]] = $arr; } } return $return; } function arrlist_keep_keys($arrlist, $keys = array()) { !is_array($keys) and $keys = array($keys); foreach ($arrlist as &$v) { $arr = array(); foreach ($keys as $key) { $arr[$key] = isset($v[$key]) ? $v[$key] : null; } $v = $arr; } return $arrlist; } function arrlist_chunk($arrlist, $key) { $r = array(); if (empty($arrlist)) { return $r; } foreach ($arrlist as &$arr) { !isset($r[$arr[$key]]) and $r[$arr[$key]] = array(); $r[$arr[$key]][] = $arr; } return $r; }; function db() { static $db; if (!isset($db)) { try { if (!defined('DB_SQLITE')) { $db = new PDO('mysql:host='.DB_HOSTNAME.';dbname='.DB_DATABASE.';charset=utf8mb4', DB_USERNAME, DB_PASSWORD); $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); $db->setAttribute(PDO::ATTR_PERSISTENT, false); $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false); $db->setAttribute(PDO::MYSQL_ATTR_INIT_COMMAND, 'SET sql_mode=\'\''); } else { $db = new PDO('sqlite:'.DB_SQLITE.'.db'); $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); $db->setAttribute(PDO::ATTR_PERSISTENT, false); } } catch (Exception $e) { $code = $e->getCode(); switch ($code) { case 1049: $msg = 'Database does not Exist!'; break; case 1045: $msg = 'Database Username or Password Error!'; break; default: $msg = 'Database Connect Failed!'; } trigger_error($msg); db_error(); exit; } } return $db; } function db_dot($k, $v) { if (strpos($k, '.')) { $name = explode('.', $k); $name = isset($name[0]) ? $name[0] : ''; $name1 = isset($name[1]) ? $name[1] : ''; $name2 = isset($name[2]) ? $name[2] : ''; $k = $name1; } else { $name = $k; $name1 = ''; $name2 = ''; } if ($name2) { $rt = isset($rt[$name1][$name2]) ? $rt[$name1][$name2] : ''; } elseif ($name1) { $rt = isset($rt[$name1]) ? $rt[$name1] : ''; } return $rt; } function db_get($k, $v = null, $table = 'setting') { $table = $table === 'kv' ? 'kv' : 'setting'; $rt = db_find_one($table, array('k' => $k)); if (!empty($rt['expire']) && $rt['expire'] < time()) { return ''; } if ($rt) { $rt = db_decode_json($rt['v']); } else { $rt = ''; } if ($v) { $rt = empty($rt) ? $v : $rt; } return $rt; } function db_set($k, $v) { $v = db_encode_json($v); $table = db_pre_table('setting'); $data = db_sql_insert(array('k' => $k, 'v' => $v)); $sql = "REPLACE INTO {$table} {$data}"; try { $rt = db()->exec($sql); } catch (\Exception $e) { if (isset($e->errorInfo[2]) && strpos($e->errorInfo[2], 'no such table') !== false) { $sql = "CREATE TABLE `{$table}` (`k` char(100) NOT NULL, `v` longtext, PRIMARY KEY (`k`) )"; db_exec($sql); $rt = db_set($k, $v); } else { db_error(); } } return $rt; } function kv_get($k, $v = null) { return db_get($k, $v = null, 'kv'); } function kv_set($k, $v, $expire = 0) { if ($expire) { $expire = time() + $expire; } $v = db_encode_json($v); $table = db_pre_table('kv'); $data = db_sql_insert(array('k' => $k, 'v' => $v, 'expire' => $expire)); $sql = "REPLACE INTO {$table} {$data}"; try { $rt = db()->exec($sql); } catch (\Exception $e) { if (isset($e->errorInfo[2]) && strpos($e->errorInfo[2], 'no such table') !== false) { $sql = "CREATE TABLE `{$table}` (`k` char(100) NOT NULL, `v` longtext, `expire` int(11) unsigned DEFAULT '0', PRIMARY KEY (`k`) )"; db_exec($sql); $rt = kv_set($k, $v, $expire); } else { db_error(); } } return $rt; } function db_insert_id($table, $field = "id") { static $arr; if (!isset($arr[$table])) { $arr[$table] = kv_get('insertID_'.$table); if (empty($arr[$table])) { $arr[$table] = db_find_one($table, array(), array($field => -1)); $arr[$table] = $arr[$table][$field]; } $arr[$table] = intval($arr[$table]); } $arr[$table]++; kv_set('insertID_'.$table, $arr[$table]); return $arr[$table]; } function db_truncate($table) { $table = db_pre_table($table); $sql = "TRUNCATE {$table};"; return db_exec($sql); } function db_insert($table, $data) { $table = db_pre_table($table); $data = db_sql_insert($data); $sql = "INSERT INTO {$table} {$data};"; return db_exec($sql); } function db_update($table, $data, $where) { $table = db_pre_table($table); $data = db_sql_update($data); $where = db_sql_cond($where, $table); $sql = "UPDATE {$table} SET {$data}{$where};"; return db_exec($sql); } function db_xupdate($table, $data, $where) { $exist = db_find_one($table, $where); if ($exist) { $rt = db_update($table, $data, $where); } else { $rt = db_insert($table, $data); } return $rt; } function db_replace($table = '', $arr = array()) { $table = db_pre_table($table); $data = db_sql_insert($arr); $sql = "REPLACE INTO {$table} {$data}"; return db_exec($sql); } function db_find($table, $condition = array(), $sort = array(), $limit = array(), $field = array()) { $table = db_pre_table($table); $where = db_sql_cond($condition, $table); $sort = db_sql_sort($sort, $condition); $limit = db_sql_limit($limit); $field = db_sql_field($field); $sql = "SELECT {$field} FROM {$table}{$where}{$sort}{$limit};"; return db_query($sql); } function db_find_one($table, $condition = array(), $sort = array(), $field = array()) { $table = db_pre_table($table); $where = db_sql_cond($condition, $table); $sort = db_sql_sort($sort, $condition); $field = db_sql_field($field); $sql = "SELECT {$field} FROM {$table}{$where}{$sort} LIMIT 1;"; return db_query_one($sql); } function db_list($table, $condition = array(), $sort = array(), $page = 1, $pagesize = 15, $field = array()) { $page = $page <= 1 ? 1 : $page; $offset = ($page - 1) * $pagesize; $limit = array($offset, $pagesize); return db_find($table, $condition, $sort, $limit, $field); } function db_delete($table, $where) { $table = db_pre_table($table); $where = db_sql_cond($where, $table); $sql = "DELETE FROM $table $where;"; return db_exec($sql); } function db_count($table = '', $condition = array(), $field = array()) { $table = db_pre_table($table); $where = db_sql_cond($condition, $table); $field = db_sql_field($field); $sql = "SELECT COUNT({$field}) AS num FROM {$table}{$where};"; $rt = db_query_one($sql); $rt = empty($rt) ? 0 : intval($rt['num']); return $rt; } function db_sql_field($field) { if (!empty($field)) { foreach ($field as $k => $v) { if (substr($v, 0, 1) == '@') { $v = substr($v, 1); $v = db_pre_field($v); $v = "DISTINCT ".$v; }else{ $v = db_pre_field($v); } $field[$k] = $v; } $field = implode(',', $field); } else { $field = '*'; } return $field; } function db_exec($sql) { db_sql($sql); $n = 0; try { $n = db()->exec($sql); } catch (Exception $e) { db_error(); if (db_commit_status()) { db()->rollBack(); } else { return false; } } $pre = strtoupper(substr(trim($sql), 0, 7)); if ($pre == 'INSERT ' || $pre == 'REPLACE') { $last_id = db()->lastinsertid(); return $last_id ? $last_id : $n; } return $n; } function db_query($sql) { db_sql($sql); try { $query = db()->query($sql); } catch (Exception $e) { db_error(); return false; } $query->setFetchMode(PDO::FETCH_ASSOC); return $query->fetchAll(); } function db_query_one($sql) { db_sql($sql); try { $query = db()->query($sql); } catch (Exception $e) { db_error(); return false; } $query->setFetchMode(PDO::FETCH_ASSOC); return $query->fetch(); } function db_error($errno = 0, $errstr = '') { $error = db()->errorInfo(); $errno = $errno ? $errno : (isset($error[1]) ? $error[1] : 0); $errstr = $errstr ? $errstr : (isset($error[2]) ? $error[2] : ''); $errstr .= "\n".db_sql(); trigger_error('Database Error:'.$errstr); } function db_sql($sql = '') { static $sql_arr = array(); if (is_numeric($sql)) { return end($sql_arr); } if (!empty($sql)) { $sql_arr[] = $sql; } return print_r($sql_arr, 1); } function db_pre_table($table) { return DB_PREFIX.$table; } function db_pre_field($field) { $pos = strpos($field, '.'); $table = ''; if ($pos) { $table = DB_PREFIX.substr($field, 0, $pos + 1); $field = substr($field, $pos + 1); } $field = $field == '*' ? $field : '`'.$field.'`'; return $table.$field; } function db_sql_sort($sort, $condition = array()) { $rt = ''; if (!empty($sort)) { $rt .= ' ORDER BY '; foreach ($sort as $k => $v) { $k = db_pre_field($k); if (empty($v)) { $rt .= $k.','; continue; } $v = $v == 1 ? ' ASC ' : ' DESC '; $rt .= $k.$v.','; } $rt = substr($rt, 0, -1); } return $rt; } function db_sql_limit($data) { if (empty($data)) { return; } $limit = ''; if (is_numeric($data)) { $limit = ' LIMIT '.intval($data); } else { isset($data[0]) and $limit = ' LIMIT '.intval($data[0]); isset($data[1]) and $limit .= ','.intval($data[1]); } return $limit.' '; } function db_sql_update($arr) { $s = ''; foreach ($arr as $k => $v) { if (is_null($v)) { $s .= "`$k`=NULL,"; } else { $v = is_array($v) ? db_encode_json($v) : $v; $v = db_sql_quote($v); $op = substr($k, 0, 1); if ($op == '+' || $op == '-' || $op == '*' || $op == '/') { $k = substr($k, 1); $s .= "`$k`=$k$op$v,"; } else { $s .= "`$k`=$v,"; } } } return substr($s, 0, -1); } function db_sql_insert($array) { $keys = array(); $values = array(); foreach ($array as $k => $v) { $k = addslashes($k); $keys[] = '`'.$k.'`'; $v = is_array($v) ? db_encode_json($v) : $v; $v = db_sql_quote($v); $values[] = $v; } $keys = implode(',', $keys); $values = implode(',', $values); return "($keys) VALUES ($values)"; } function db_sql_group($group = array()) { $groupby = ''; if (!empty($group) && is_array($group)) { $group = db_sql_field($group); $groupby = ' GROUP BY '.$group; } return $groupby; } function db_sql_quote($value) { if (is_array($value)) { foreach ($value as $k => $v) { $value[$k] = db_sql_quote($v); } } elseif (is_int($value) || is_float($value)) { $value = $value; } elseif (is_null($value)) { $value = 'NULL'; } else { $value = db()->quote($value); } return $value; } function db_sql_field_parse($field, $value, $main_table) { $rt = ''; $AND = substr($field, 0, 1); if ($AND == '|') { $field = substr($field, 1); } $AND = $AND == '|' ? ' OR ' : ' AND '; $op1 = substr($field, 0, 1); $op2 = substr($field, 0, 2); $op3 = substr($field, 0, 3); if (in_array($op3, array('@<>', '@><'))) { $op = $op3; $field = substr($field, 3); } elseif (in_array($op2, array('>=', '<=', '!=', '@<', '@>', '@=', 'OR', '%>', '%<', '%!', '~|'))) { $op = $op2; $field = substr($field, 2); } elseif (in_array($op1, array('<', '>', '=', '|', '&', '@', '%', '~'))) { $op = $op1; $field = substr($field, 1); } elseif ($op1 == '!') { $op = '!='; $field = substr($field, 1); } elseif ($op1 == '=') { $op = '='; $field = substr($field, 1); } else { $op = '='; $field = $field; } if (substr($op, 0, 1) == '@') { $AND = ''; $left = explode('.', $field); $right = explode('.', $value); $join_table = DB_PREFIX.$left[0] === $main_table ? $right[0] : $left[0]; $join_table = db_pre_table($join_table); $left = db_pre_field($field); $right = db_pre_field($value); } else { $field = db_pre_field($field); } switch ($op) { case '@': case '@<': $rt = " LEFT JOIN {$join_table} ON {$left} = {$right}"; break; case '@>': $rt = " RIGHT JOIN {$join_table} ON {$left} = {$right}"; break; case '@=': $rt = " INNER JOIN {$join_table} ON {$left} = {$right}"; break; case '@<>': $rt = " FULL JOIN {$join_table} ON {$left} = {$right}"; break; case '@><': $rt = " CROSS JOIN {$join_table} ON {$left} = {$right}"; break; case '%': $rt = "{$field} LIKE ".db_sql_quote("%{$value}%"); break; case '%<': $rt = "{$field} LIKE ".db_sql_quote("%{$value}"); break; case '%>': $rt = "{$field} LIKE ".db_sql_quote("{$value}%"); break; case '%!': $rt = "{$field} NOT LIKE ".db_sql_quote("%{$value}%"); break; case '~': case '~|'; $_AND = 'AND'; if (substr($op, -1) == '|') { $_AND = 'OR'; } if (is_array($value)) { $rt .= '('; foreach ($value as $v) { $v = db_sql_quote($v); $rt .= "FIND_IN_SET({$v}, {$field}) {$_AND} "; } $rt = substr($rt, 0, -4).')'; } else { $value = db_sql_quote($value); $rt = "FIND_IN_SET({$value}, {$field})"; } break; default: if (is_array($value)) { $value = db_sql_quote($value); $in = implode(',', $value); $rt = "{$field} IN($in)"; } else { $value = db_sql_quote($value); $rt = "{$field} {$op} {$value}"; } break; } return $AND.$rt; } function db_sql_cond($cond = array(), $table = null) { if (empty($cond)) { return; } $where = ''; $join = ''; $group = ''; if (!empty($cond['@GROUP'])) { $group = db_sql_group($cond['@GROUP']); unset($cond['@GROUP']); } foreach ($cond as $key => $value) { if (substr($key, 0, 1) == '@') { $join .= db_sql_field_parse($key, $value, $table); continue; } if (is_array($value) && !isset($value[0])) { $keys = array_keys($value); $AND = $keys[0][0] === '|' ? 'OR' : 'AND'; $s = ''; foreach ($value as $k => $v) { $s .= db_sql_field_parse($k, $v, $table); } $s = substr($s, 4); $where .= " {$AND} ({$s})"; } else { $where .= db_sql_field_parse($key, $value, $table); } } if ($where) { $where = ' WHERE '.substr($where, 4); } return $join.$group.$where; } function db_encode_json($data) { if (version_compare(PHP_VERSION, '5.4.0') >= 0) { return json_encode($data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE); } $type = gettype($data); switch ($type) { case 'NULL': return 'null'; case 'boolean': return ($data ? 'true' : 'false'); case 'integer': case 'double': case 'float': return $data; case 'string': return '"'.str_replace(array('\\', '"', "\r", "\n", "\t"), array('\\\\', '\\"', '\\r', '\\n', '\\t'), $data).'"'; case 'object': $data = get_object_vars($data); case 'array': $_data = array(); $out1 = $out2 = array(); foreach ($data as $key => $value) { $key = str_replace(array('\\', '"', "\r", "\n", "\t"), array('\\\\', '\\"', '\\r', '\\n', '\\t'), $key); $out1[] = db_encode_json($value); $out2[] = '"'.$key.'":'.db_encode_json($value); $_data[] = $value; } return $data === $_data ? '['.implode(",", $out1).']' : '{'.implode(",", $out2).'}'; default: return ''; } } function db_decode_json($json) { $json = trim($json, "\xEF\xBB\xBF"); $json = trim($json, "\xFE\xFF"); return json_decode($json, 1); } function db_commit_status($status = null) { static $_status; if (!is_null($status)) { $_status = $status; } return empty($_status) ? 0 : 1; } function db_commit_start() { db_commit_status(1); db()->beginTransaction(); } function db_commit_end() { db_commit_status(0); db()->commit(); };function encode_json($data) { if (version_compare(PHP_VERSION, '5.4.0') >= 0) { return json_encode($data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE); } $type = gettype($data); switch ($type) { case 'NULL': return 'null'; case 'boolean': return ($data ? 'true' : 'false'); case 'integer': case 'double': case 'float': return $data; case 'string': return '"'.str_replace(array('\\', '"', "\r", "\n", "\t"), array('\\\\', '\\"', '\\r', '\\n', '\\t'), $data).'"'; case 'object': $data = get_object_vars($data); case 'array': $_data = array(); $out1 = $out2 = array(); foreach ($data as $key => $value) { $key = str_replace(array('\\', '"', "\r", "\n", "\t"), array('\\\\', '\\"', '\\r', '\\n', '\\t'), $key); $out1[] = encode_json($value); $out2[] = '"'.$key.'":'.encode_json($value); $_data[] = $value; } return $data === $_data ? '['.implode(",", $out1).']' : '{'.implode(",", $out2).'}'; default: return ''; } } function object_array($object) { $data = encode_json($object); $data = decode_json($data); return $data; } function decode_json($json, $defVal = array()) { $rt = $defVal; if (!empty($json)) { $json = trim($json, "\xEF\xBB\xBF"); $json = trim($json, "\xFE\xFF"); $rt = json_decode($json, true); } if ($rt == '' || is_null($rt)) { $rt = $defVal; } return $rt; } function url_encode($s) { $s = urlencode($s); $s = str_replace('_', '_5f', $s); $s = str_replace('-', '_2d', $s); $s = str_replace('.', '_2e', $s); $s = str_replace('+', '_2b', $s); $s = str_replace('=', '_3d', $s); $s = str_replace('%', '_', $s); return $s; } function url_decode($s) { $s = str_replace('_', '%', $s); $s = urldecode($s); return $s; };function dir_create($dir) { return is_dir($dir) or dir_create(dirname($dir)) and mkdir($dir, 0755, true); } function file_read($file, $times = 3) { if (!file_exists($file)) { return false; } while ($times-- > 0) { $fp = fopen($file, 'rb'); if ($fp) { $size = filesize($file); if ($size == 0) { return ''; } $s = fread($fp, $size); fclose($fp); return $s; } else { sleep(1); } } return false; } function file_write($file, $s, $times = 3) { $dir = dirname($file); is_dir($dir) or mkdir($dir, 0755, true); while ($times-- > 0) { $fp = fopen($file, 'wb'); if ($fp and flock($fp, LOCK_EX)) { $n = fwrite($fp, $s); version_compare(PHP_VERSION, '5.3.2', '>=') and flock($fp, LOCK_UN); fclose($fp); clearstatcache(); return $n; } else { sleep(1); } } return false; } function rmdir_recusive($dir) { if ($dir == '/' || $dir == './' || $dir == '../') { return false; } if (!is_dir($dir)) { return false; } substr($dir, -1) != '/' and $dir .= '/'; $files = array(); $handle = opendir($dir); while (($file = readdir($handle)) !== false) { if ('.' != $file && '..' != $file) { is_dir("$dir$file") ? rmdir_recusive("$dir$file") : @unlink("$dir$file"); } } closedir($handle); rmdir($dir); };function form_text($name, $value = null, $placeholder = '', $width = false, $ext = null) { is_array($value) and $value = isset($value[$name]) ? $value[$name] : null; $style = ''; if ($width !== false) { is_numeric($width) and $width .= 'px'; $style = " style=\"width: $width\""; } if (is_string($value)) { $value = htmlspecialchars($value); } $s = "<input type=\"text\" name=\"$name\" $ext placeholder=\"$placeholder\" value=\"$value\" class=\"form-text\"$style autocomplete=\"off\" />"; return $s; } function form_text2($name, $value = null, $placeholder = '', $td = 2) { isset($value[$name]) and $value = $value[$name]; is_string($value) and $value = decode_json($value); $tr = ''; if ($placeholder) { $tr .= '<tr class="form_table_tips">'; $labels = explode(',', $placeholder); for ($i = 0; $i < $td; $i++) { $tr .= '<td>'.form_val($i, $labels).'</td>'; } $tr .= '</tr>'; } empty($value) and $value = array(); $tr .= '<tr>'; for ($i = 1; $i <= $td; $i++) { $field = 'f'.$i; $field_name = $name.'['.$field.']'; $tr .= "<td><input type=\"text\" class=\"form-text\" name=\"$field_name\" value=\"".form_val($field, $value).'"><span class="form_upload"></span></td>'; } $tr .= '</tr>'; $table = "<table class=\"form-table form_texts form_table_{$name} form_table_{$td}\" data-num=\"{$td}\" >{$tr}</table>"; return $table; } function form_password($name, $value = null, $placeholder = '', $width = false) { is_array($value) and $value = isset($value[$name]) ? $value[$name] : null; $style = ''; if ($width !== false) { is_numeric($width) and $width .= 'px'; $style = " style=\"width: $width\""; } $s = "<input type=\"password\" name=\"$name\"  placeholder=\"$placeholder\" class=\"form-password\" value=\"$value\" $style autocomplete=\"off\" />"; return $s; } function password($password, $salt = '') { empty($salt) and trigger_error('salt can not empty!'); return md5($salt.$password.$salt.'@simphp'); } function form_data_password($data) { if (empty($data['password'])) { return $data; } $data['salt'] = rand_string(6); $data['password'] = password($data['password'], $data['salt']); return $data; } function form_captcha($name, $value = null, $placeholder = 'captcha') { return '<span class="form">'.form_text($name, $value, $placeholder).'<img class="captcha" src="/public/verify/captcha"></span>'; } function form_radio_yes_no($name, $checked = 0, $placeholder = '') { $checked = intval($checked); return form_radio($name, array(1 => lang('yes'), 0 => lang('no')), $checked); } function form_radio($name, $checked = 0, $arr = array()) { empty($arr) && $arr = array('No', 'Yes'); $s = ''; foreach ((array) $arr as $k => $v) { $add = $k == $checked ? ' checked="checked"' : ''; $s .= "<label class=\"form-label\"><input type=\"radio\" class=\"form-radio\" name=\"$name\" value=\"$k\"$add /> $v</label>\r\n"; } return $s; } function form_checkbox($name, $checked = 0, $label = '', $val = 1) { $add = $checked ? ' checked="checked"' : ''; $s = "<label class=\"form-label\"><input type=\"checkbox\" class=\"form-checkbox\" name=\"$name\" value=\"$val\" $add /> $label</label>"; return $s; } function form_multi_checkbox($name, $arr, $checked = array()) { $s = ''; foreach ($arr as $value => $text) { $ischecked = in_array($value, $checked); $s .= form_checkbox($name, $ischecked, $text, $value); } return $s; } function form_select($name, $arr, $checked = 0, $disabled = array()) { if (is_array($checked)) { $checked = isset($checked[$name]) ? $checked[$name] : null; } if (empty($arr)) { return ''; } $s = "<select name=\"$name\" class=\"form-select\"> \r\n"; $s .= form_options($arr, $checked); $s .= "</select> \r\n"; return $s; } function form_options($arr, $checked = 0) { $s = ''; if (!is_array($checked)) { $checked = array($checked); } foreach ((array) $arr as $k => $v) { $add = in_array($k, $checked) ? ' selected="selected"' : ''; $s .= "<option value=\"$k\"$add>$v</option> \r\n"; } return $s; } function form_selects_ajax($name, $value = array(), $placeholder = '', $path = 'article/name') { if (!empty($value) && !is_array($value)) { $value = decode_json($value); } if (isset($value[$name])) { $value = $value[$name]; } if (count($value) != count($value, COUNT_RECURSIVE)) { $value = array(); } $option = ''; if (!empty($value)) { list($table, $table_name) = explode('/', $path); $list = db_find($table, array('id' => $value)); if (empty($list)) { $list = array(); } foreach ($list as $v) { $option .= "<option value=\"{$v['id']}\" selected=\"selected\">{$v['name']}</option>"; } } return "<select class=\"form-selects-ajax\" name=\"{$name}[]\" multiple=\"multiple\" data-placeholder=\"{$placeholder}\" path=\"{$path}\">{$option}</select>"; } function form_level($name, $arr = array(), $checked = 0) { $s = "<select name=\"$name\" class=\"form-select\"> \r\n"; $s .= form_level_option($arr, $checked); $s .= "</select> \r\n"; return $s; } function form_level_option($arr = array(), $checked = 0, $tips = 'select') { $s = '<option value="0">'.lang($tips).'</option>'; foreach ((array) $arr as $k => $v) { $add = $v['id'] == $checked ? ' selected="selected"' : ''; $s .= "<option value=\"{$v['id']}\"$add>{$v['name']}</option> \r\n"; } return $s; } function form_level_radio($name, $arr = array()) { $s = ''; $level = array(); foreach ((array) $arr as $k => $v) { $level[$v['id']] = $v['name']; } $s .= form_radio($name, $level); return $s; } function form_select_catalog($name, $data = array(), $id = 0) { static $menu; $data = arrlist_change_key($data, 'id'); isset($menu) or $menu = get_tree(0, $data); is_array($id) and $id = isset($id['id']) ? $id['id'] : ''; $pid = isset($data[$id]['pid']) ? intval($data[$id]['pid']) : 0; $id = intval($id); $s = "<select name=\"base[$name]\" class=\"form-select form_catalog\">"; $s .= '<option value="0">=====Top Catalog=====</option>'; if (!empty($menu)) { foreach ((array) $menu as $k => $v) { $add = ''; $v['id'] = intval($v['id']); $id === $v['id'] and $add .= ' disabled="disabled"'; $pid === $v['id'] and $add .= ' selected="selected"'; $s .= "<option value=\"{$v['id']}\"$add>{$v['fullname']}</option> \r\n"; } } $s .= '</select>'; return $s; } function form_select_article($name, $data = array(), $pid = 0) { static $menu; $data = arrlist_change_key($data, 'id'); isset($menu) or $menu = get_tree(0, $data); is_array($pid) and $pid = intval($pid[$name]); $pid = intval($pid); $s = "<select name=\"base[$name]\" class=\"form-select form_catalog\"><option value=\"\">--請選擇--</option>"; foreach ($menu as $v) { $add = ''; $v['id'] = intval($v['id']); $v['type'] != 1 and $add .= ' disabled="disabled"'; $pid === $v['id'] and $add .= ' selected="selected"'; $s .= "<option value=\"{$v['id']}\"$add>{$v['fullname']}</option> \r\n"; } $s .= '</select>'; return $s; } function form_catalog_type($name, $val = null, $placeholder = null) { isset($val) or $val = 0; return form_radio($name, array(lang('page'), lang('list')), $val); } function form_date($name, $value = null, $placeholder = '', $defVal = null) { is_array($value) and $value = isset($value[$name]) ? $value[$name] : null; is_numeric($value) and $value = date('Y-m-d', $value); return form_text($name, $value, $placeholder, $defVal, $type = 'date'); } function form_datetime($name, $value = null, $placeholder = '', $defVal = null) { is_array($value) and $value = isset($value[$name]) ? $value[$name] : null; is_numeric($value) and $value = date('Y-m-d H:i:s', $value); return form_text($name, $value, $placeholder, $defVal, $type = 'datetime'); } function form_time($name, $value = null, $placeholder = '', $defVal = null) { is_array($value) and $value = isset($value[$name]) ? $value[$name] : null; return form_text($name, $value, $placeholder, $defVal, $type = 'time'); } function form_daterange($name, $value = null, $placeholder = '', $defVal = null) { is_array($value) and $value = isset($value[$name]) ? $value[$name] : null; return form_text($name, $value, $placeholder, $defVal, $type = 'daterange'); } function form_timerange($name, $value = null, $placeholder = '', $defVal = null) { is_array($value) and $value = isset($value[$name]) ? $value[$name] : null; return form_text($name, $value, $placeholder, $defVal, $type = 'timerange'); } function form_datetimerange($name, $value = null, $placeholder = '', $defVal = null) { is_array($value) and $value = isset($value[$name]) ? $value[$name] : null; return form_text($name, $value, $placeholder, $defVal, $type = 'datetimerange'); } function form_file($name, $value = null, $placeholder = '', $width = false) { return form_text($name, $value, $placeholder, $width, $type = 'file').'<span class="btn form_upload" form_file>'.'<u></u>Upload'.'</span>'; } function form_files($name, $value = null, $placeholder = '', $width = false) { return form_text($name, $value, $placeholder, $width, $type = 'files'); } function form_img($name, $value = null, $placeholder = '', $width = false) { is_array($value) and $value = isset($value[$name]) ? $value[$name] : null; $img = ''; is_string($value) and !empty($value) and $img = '<img src="'.$value.'">'; return form_text($name, $value, $placeholder, $width, $type = 'img upload').'<span class="btn form_upload" form_img>'.'<u></u>Upload'.'</span><div class="upd_img">'.$img.'</div>'; } function form_extends($name, $value = null, $placeholder = '', $width = false) { $id = isset($value['id']) ? intval($value['id']) : 0; return form_textarea($name, $value, null, null, 'extends'); } function form_video($name, $value = null, $placeholder = '', $width = false) { return form_text($name, $value, $placeholder, $width, $type = 'video upload').'<span class="btn form_upload" form_video>'.lang('upload').'</span>'; } function form_imgs($name, $value = null, $placeholder = '') { is_array($value) and isset($value[$name]) and $value = $value[$name]; is_string($value) and $value = decode_json($value); $ul = '<ul class="form_imgs sortable">'; if (!empty($value) && is_array($value)) { foreach ($value as $k => $v) { if (!isset($v['src'])) { break; } $li = '<li>'; $li .= '<b><i>x</i></b>'; $li .= '<u><i>Replace</i></u>'; $li .= '<em><img src="'.$v['src'].'" ></em>'; $li .= '<div class="txt"><input type="text" data-name="name" value="'.$v['name'].'" placeholder="title">'; $li .= '<input type="text" data-name="url" value="'.$v['url'].'" placeholder="url">'; $li .= '<input type="hidden" data-name="src" value="'.$v['src'].'" placeholder="src">'; $li .= '</div></li>'; $ul .= $li; } } $ul .= '</ul>'; return "<br><span class=\"btn\" form_imgs data-name=\"$name\"><i class=\"fa fa-upload\"></i><input type=\"hidden\" name=\"$name\">".'Upload'.'</span>'.$ul; } function form_table($name, $value = null, $placeholder = null, $td = 1) { isset($value[$name]) and $value = $value[$name]; is_string($value) and $value = decode_json($value); $tr = ''; if ($placeholder) { $tr .= '<tr class="form_table_tips">'; $labels = explode(',', $placeholder); for ($i = 0; $i < $td; $i++) { $tr .= '<td>'.form_val($i, $labels).'</td>'; } $tr .= '<td></td></tr>'; } empty($value) and $value = array(array()); foreach ($value as $k => $v) { $tr .= '<tr>'; for ($i = 1; $i <= $td; $i++) { $tr .= "<td><input type=\"text\" class=\"form-text\" data-name=\"f{$i}\" value=\"".form_val('f'.$i, $v).'"><span class="form_upload"></span></td>'; } $tr .= '<td><i class="fa fa-times"></i></td>'; $tr .= '</tr>'; } $table = "<table class=\"form-table form_json form_table_{$name} form_table_{$td}\" data-name=\"{$name}\" data-num=\"{$td}\" >{$tr}</table>"; return $table."<span class=\"form-btn\" form_table_add data-name=\"$name\"><i class=\"fa fa-plus\"></i></span>"; } function form_table1($name, $value = null, $placeholder = '') { return form_table($name, $value, $placeholder, 1); } function form_table2($name, $value = null, $placeholder = '') { return form_table($name, $value, $placeholder, 2); } function form_table3($name, $value = null, $placeholder = '') { return form_table($name, $value, $placeholder, 3); } function form_table4($name, $value = null, $placeholder = '') { return form_table($name, $value, $placeholder, 4); } function form_table5($name, $value = null, $placeholder = '') { return form_table($name, $value, $placeholder, 5); } function form_table6($name, $value = null, $placeholder = '') { return form_table($name, $value, $placeholder, 6); } function form_table7($name, $value = null, $placeholder = '') { return form_table($name, $value, $placeholder, 7); } function form_table8($name, $value = null, $placeholder = '') { return form_table($name, $value, $placeholder, 8); } function form_table9($name, $value = null, $placeholder = '') { return form_table($name, $value, $placeholder, 9); } function form_table10($name, $value = null, $placeholder = '') { return form_table($name, $value, $placeholder, 10); } function form_item_template($name, $value = null, $length = 4) { is_array($value) and isset($value[$name]) and $value = $value[$name]; is_string($value) and $value = decode_json($value); $tr = ''; for ($i = 0; $i < $length; $i++) { $v = $value[$i]; $tr .= '<tr>'; $tr .= '<td><em><i class="fa fa-arrows"></i></em></td>'; $tr .= '<td>'; $tr .= form_widget_img('img', $v); $tr .= '</td>'; $tr .= '<td>'; $tr .= '<div class="form_place">'; $tr .= form_label_text('Title', 'title', $v); $tr .= form_label_textarea('Text', 'text', $v); $tr .= '<div class="form_label_group">'.form_label_text('Button', 'btn', $v).form_label_text('Link', 'url', $v).'</div>'; $tr .= '</div>'; $tr .= '</td>'; $tr .= '</tr>'; } $html = '<div class="form_place">'; $html .= form_auto_text($name, 'title', $value, 'Title'); $html .= form_auto_text($name, 'subtitle', $value, 'SubTitle'); $html .= form_auto_textarea($name, 'description', $value, 'Text'); $html .= '</div>'; $html .= '<table class="form_item" form_name="'.$name.'"><thead><tr><th>Sort</th><th>Photo</th><th>Text</th></tr></thead><tbody sortable>'.$tr.'</tbody></table>'; return '<div class="form_panel"><div class="form_panel_body">'.$html.'</div></div>'; } function form_item($name, $value) { return form_item_template($name, $value, 4); } function form_item_imgs_template($name, $value = null, $length = 4) { is_array($value) and isset($value[$name]) and $value = $value[$name]; is_string($value) and $value = decode_json($value); $tr = '<tr>'; for ($i = 0; $i < $length; $i++) { $v = $value[$i]; $tr .= '<td>'; $tr .= form_widget_img('img', $v); $tr .= form_widget_txt('txt', $v); $tr .= '</td>'; } $tr .= '</tr>'; $html .= '<table class="form_item" form_each-td form_name="'.$name.'"><tbody>'.$tr.'</tbody></table>'; return '<div class="form_panel"><div class="form_panel_body">'.$html.'</div></div>'; } function form_item_imgs($name, $value) { return form_item_imgs_template($name, $value, 4); } function form_item_imgs1($name, $value) { return form_item_imgs_template($name, $value, 1); } function form_section($name, $value = null, $placeholder = '') { is_array($value) and isset($value[$name]) and $value = $value[$name]; is_string($value) and $value = decode_json($value); $imgs = '<div class="img">'.form_auto_img($name, 'img', $value).form_auto_img($name, 'img2', $value).'</div>'; $txts = '<div class="txt">'.form_auto_text($name, 'tit', $value, 'Title').form_auto_textarea($name, 'txt', $value, 'Text').form_auto_editor($name, 'content', $value, 'Content').'<div class="btn_wrap">'.form_auto_text($name, 'btn', $value, 'Button').form_auto_text($name, 'link', $value, 'Link').'</div>'.'</div>'; $html = '<div class="form_media form_panel_body form_section">'.$imgs.$txts.'</div>'; return $html; } function form_media($name, $value = null, $placeholder = '') { is_array($value) and isset($value[$name]) and $value = $value[$name]; is_string($value) and $value = decode_json($value); $imgs = '<div class="img">'.form_auto_img($name, 'img', $value).'</div>'; $txts = '<div class="txt">'.form_auto_text($name, 'tit', $value, 'Title').form_auto_textarea($name, 'txt', $value, 'Text').'<div class="btn_wrap">'.form_auto_text($name, 'btn', $value, 'Button').form_auto_text($name, 'link', $value, 'Link').'</div>'.'</div>'; $html = '<div class="form_media form_panel_body">'.$imgs.$txts.'</div>'; return $html; } function form_media0($name, $value = null, $placeholder = '') { is_array($value) and isset($value[$name]) and $value = $value[$name]; is_string($value) and $value = decode_json($value); $imgs = ''; $txts = '<div class="txt">'.form_auto_text($name, 'tit', $value, 'Title').form_auto_textarea($name, 'txt', $value, 'Text').'<div class="btn_wrap">'.form_auto_text($name, 'btn', $value, 'Button').form_auto_text($name, 'link', $value, 'Link').'</div>'.'</div>'; $html = '<div class="form_media form_media0 form_panel_body">'.$imgs.$txts.'</div>'; return $html; } function form_media2($name, $value = null, $placeholder = '') { is_array($value) and isset($value[$name]) and $value = $value[$name]; is_string($value) and $value = decode_json($value); $imgs = '<div class="img">'.form_auto_img($name, 'img', $value).'</div>'; $txts = '<div class="txt">'.form_auto_text($name, 'tit', $value, 'Title').form_auto_text($name, 'tit2', $value, 'SubTitle').form_auto_textarea($name, 'txt', $value, 'Text').'<div class="btn_wrap">'.form_auto_text($name, 'btn', $value, 'Button').form_auto_text($name, 'link', $value, 'Link').'</div>'.'</div>'; $html = '<div class="media">'.$imgs.$txts.'</div></div>'; return $html; } function form_media3($name, $value = null, $placeholder = '') { is_array($value) and isset($value[$name]) and $value = $value[$name]; is_string($value) and $value = decode_json($value); $imgs = '<div class="img">'.form_auto_img($name, 'img1', $value).'</div>'.'<div class="img">'.form_auto_img($name, 'img2', $value).'</div>'.'<div class="img">'.form_auto_img($name, 'img3', $value).'</div>'; $txts = '<div class="txt">'.form_auto_text($name, 'tit', $value, 'Title').form_auto_textarea($name, 'txt', $value, 'Text').'<div class="btn_wrap">'.form_auto_text($name, 'btn', $value, 'Button').form_auto_text($name, 'link', $value, 'Link').'</div>'.'</div>'; $html = '<div class="media media3 form_panel_body ac">'.$imgs.$txts.'</div></div>'; return $html; } function form_section_img($key, $name, $val = null, $plc = null) { $key = $key.'['.$name.']'; is_array($val) and isset($val[$name]) and $val = $val[$name]; return form_widget_img($key, $val); } function form_txt($name, $value = null, $placeholder = null) { is_array($value) and $value = isset($value[$name]) ? $value[$name] : null; $s = "<input type=\"text\" name=\"$name\" attr-name=\"$name\"  value=\"$value\" />"; return $s; } function form_hidden($name, $value = null, $placeholder = null) { is_array($value) and $value = isset($value[$name]) ? $value[$name] : null; $s = "<input type=\"hidden\" name=\"$name\" attr-name=\"$name\"  value=\"$value\" />"; return $s; } function form_widget_img($name, $value = '') { is_array($value) and $value = isset($value[$name]) ? $value[$name] : null; $img = empty($value) ? NO_IMG : $value; return '<div class="form_widget_img"><div class="form_widget_img_wrap" style="background-image: url('.$img.');"></div>'.form_hidden($name, $value).'<div class="form_widget_img_btn"></div></div>'; } function form_widget_txt($name, $value = '') { is_array($value) and $value = isset($value[$name]) ? $value[$name] : null; return '<div class="form_widget_txt">'.form_txt($name, $value).'</div>'; } function form_label_text($label, $name, $value = '') { is_array($value) and $value = isset($value[$name]) ? $value[$name] : null; return '<div class="form_label_text"><label class="form_label">'.$label.'</label><input type="text" class="form_text" attr-name="'.$name.'" value="'.$value.'"></div>'; } function form_label_textarea($label, $name, $value = '') { is_array($value) and $value = isset($value[$name]) ? $value[$name] : null; return '<div class="form_label_text"><label class="form_label">'.$label.'</label><textarea class="form_textarea" attr-name="'.$name.'">'.$value.'</textarea></div>'; } function form_banner4($name, $value = null, $placeholder = '') { is_array($value) and isset($value[$name]) and $value = $value[$name]; is_string($value) and $value = decode_json($value); $value[] = array(); $length = count($value); $tr = ''; $temp = ''; foreach ($value as $k => $v) { $_tr = '<tr>'; $_tr .= '<td><em><i class="fa fa-arrows"></i></em></td>'; $_tr .= '<td>'; $_tr .= form_widget_img('img1', $v); $_tr .= form_widget_img('img2', $v); $_tr .= form_widget_img('img3', $v); $_tr .= form_widget_img('img4', $v); $_tr .= '</td>'; $_tr .= '<td>'; $_tr .= '<div class="form_place">'; $_tr .= form_label_text('Text 1', 'a1', $v); $_tr .= form_label_text('Text 2', 'a2', $v); $_tr .= form_label_text('Text 3', 'a3', $v); $_tr .= form_label_text('Text 4', 'a4', $v); $_tr .= '<div class="form_label_group">'.form_label_text('Button', 'btn', $v).form_label_text('Link', 'url', $v).'</div>'; $_tr .= '</div>'; $_tr .= '</td>'; $_tr .= '<td class="del"><i class="fa fa-times"></i></td>'; $_tr .= '</tr>'; if ($k == $length - 1) { $temp = $_tr; } else { $tr .= $_tr; } } $html = '<table class="form_item form_banner4" form_name="'.$name.'"><thead><tr><th>Sort</th><th>Picture</th><th>Text</th><th>Operate</th></tr></thead><tbody>'.$tr.'</tbody><tfoot>'.$temp.'</tfoot></table>'; return '<div class="form_panel"><div class="form_panel_body">'.$html.'</div><div class="form_panel_footer"><span class="btn"><i class=\"fa fa-upload\"></i>Add Item</span></div></div>'; } function form_banner($name, $value = null, $placeholder = '') { is_array($value) and isset($value[$name]) and $value = $value[$name]; is_string($value) and $value = decode_json($value); $value[] = array(); $length = count($value); $tr = ''; $temp = ''; foreach ($value as $k => $v) { $_tr = '<tr>'; $_tr .= '<td><em><i class="fa fa-arrows"></i></em></td>'; $_tr .= '<td>'; $_tr .= form_widget_img('img', $v); $_tr .= '</td>'; $_tr .= '<td>'; $_tr .= '<div class="form_place">'; $_tr .= form_label_text('Title', 'tit', $v); $_tr .= form_label_textarea('Text', 'txt', $v); $_tr .= '<div class="form_label_group">'.form_label_text('Button', 'btn', $v).form_label_text('Link', 'url', $v).'</div>'; $_tr .= '</div>'; $_tr .= '</td>'; $_tr .= '<td class="del"><i class="fa fa-times"></i></td>'; $_tr .= '</tr>'; if ($k == $length - 1) { $temp = $_tr; } else { $tr .= $_tr; } } $html = '<table class="form_item sortable" form_name="'.$name.'"><thead><tr><th>Sort</th><th>Picture</th><th>Text</th><th>Operate</th></tr></thead><tbody>'.$tr.'</tbody><tfoot>'.$temp.'</tfoot></table>'; return '<div class="form_panel"><div class="form_panel_body">'.$html.'</div><div class="form_panel_footer"><span class="btn"><i class=\"fa fa-upload\"></i>Add Item</span></div></div>'; } function form_banner2($name, $value = null, $placeholder = '') { is_array($value) and isset($value[$name]) and $value = $value[$name]; is_string($value) and $value = decode_json($value); $value[] = array(); $length = count($value); $tr = ''; $temp = ''; foreach ($value as $k => $v) { $_tr = '<tr>'; $_tr .= '<td><em><i class="fa fa-arrows"></i></em></td>'; $_tr .= '<td>'; $_tr .= form_widget_img('img', $v); $_tr .= form_widget_img('img2', $v); $_tr .= '</td>'; $_tr .= '<td>'; $_tr .= '<div class="form_place">'; $_tr .= form_label_text('Title', 'title', $v); $_tr .= form_label_textarea('Text', 'description', $v); $_tr .= '<div class="form_label_group">'.form_label_text('Button', 'btn', $v).form_label_text('Link', 'url', $v).'</div>'; $_tr .= '</div>'; $_tr .= '</td>'; $_tr .= '<td class="del"><i class="fa fa-times"></i></td>'; $_tr .= '</tr>'; if ($k == $length - 1) { $temp = $_tr; } else { $tr .= $_tr; } } $html = '<table class="form_item form_item2 sortable" form_name="'.$name.'"><thead><tr><th>Sort</th><th>Picture</th><th>Text</th><th>Operate</th></tr></thead><tbody>'.$tr.'</tbody><tfoot>'.$temp.'</tfoot></table>'; return '<div class="form_panel"><div class="form_panel_body">'.$html.'</div><div class="form_panel_footer"><span class="btn"><i class=\"fa fa-upload\"></i>Add Item</span></div></div>'; } function form_faq($name, $value = null, $placeholder = '') { is_array($value) and isset($value[$name]) and $value = $value[$name]; is_string($value) and $value = decode_json($value); $value[] = array(); $length = count($value); $tr = ''; $temp = ''; foreach ($value as $k => $v) { $_tr = '<tr>'; $_tr .= '<td><em><i class="fa fa-arrows"></i></em></td>'; $_tr .= '<td>'; $_tr .= '<div class="form_place">'; $_tr .= form_label_text('Question', 'title', $v); $_tr .= form_label_textarea('Answer', 'description', $v); $_tr .= '</div>'; $_tr .= '</td>'; $_tr .= '<td class="del"><i class="fa fa-times"></i></td>'; $_tr .= '</tr>'; if ($k == $length - 1) { $temp = $_tr; } else { $tr .= $_tr; } } $html = '<table class="form_item" form_name="'.$name.'"><thead><tr><th>排序</th><th>文字</th><th>操作</th></tr></thead><tbody>'.$tr.'</tbody><tfoot>'.$temp.'</tfoot></table>'; return '<div class="form_panel"><div class="form_panel_body">'.$html.'</div><div class="form_panel_footer"><span class="btn"><i class=\"fa fa-upload\"></i>Add Item</span></div></div>'; } function form_banner1($name, $value = null, $placeholder = '') { is_array($value) and isset($value[$name]) and $value = $value[$name]; is_string($value) and $value = decode_json($value); $noimg = NO_IMG; $li = '<li class="flex">'; $li .= '<div class="arrow vc"><em><i class="fa fa-arrows"></i></em></div>'; $li .= '<div class="img">'; $li .= '<div class="thumb"><div attr-name="img1" style="background-image: url(img1);"></div></div>'; $li .= '<div class="thumb"><div attr-name="img2" style="background-image: url(img2);"></div></div>'; $li .= '<div class="thumb"><div attr-name="img3" style="background-image: url(img3);"></div></div>'; $li .= '<div class="thumb"><div attr-name="img4" style="background-image: url(img4);"></div></div>'; $li .= '</div>'; $li .= '<div class="txt">'; $li .= '<input type="text" data-name="f1" value="f1" placeholder="Title 1">'; $li .= '<input type="text" data-name="f2" value="f2" placeholder="Title 2">'; $li .= '<input type="text" data-name="f3" value="f3" placeholder="Title 3">'; $li .= '<input type="text" data-name="f4" value="f4" placeholder="Title 4">'; $li .= '<input type="text" data-name="btn" value="btn" placeholder="Button">'; $li .= '<input type="text" data-name="url" value="url" placeholder="Link">'; $li .= '<input type="hidden" data-name="img1" value="img1" placeholder="field">'; $li .= '<input type="hidden" data-name="img2" value="img2" placeholder="field">'; $li .= '<input type="hidden" data-name="img3" value="img3" placeholder="field">'; $li .= '<input type="hidden" data-name="img4" value="img4" placeholder="field">'; $li .= '</div>'; $li .= '<div class="del vc"><i class="fa fa-times"></i></div>'; $li .= '</li>'; $fields = array('f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'src', 'img', 'img1', 'img2', 'img3', 'img4', 'img5', 'img6', 'img7', 'img8', 'src', 'src1', 'src2', 'src3', 'src4', 'src5', 'src6', 'src7', 'scr8', 'button', 'btn', 'url'); $_li = ''; if (!empty($value) && is_array($value)) { foreach ($value as $k => $v) { $_temp = $li; foreach ($fields as $field) { $v2 = isset($v[$field]) ? $v[$field] : ''; $_temp = str_replace('value="'.$field.'"', 'value="'.$v2.'"', $_temp); empty($v2) && $v2 = $noimg; $_temp = str_replace('url('.$field.')', 'url('.$v2.')', $_temp); } $_li .= $_temp; } } $ul = '<ul class="form_img4 sortable form_list" form_list>'.$_li.'</ul>'; foreach ($fields as $field) { $li = str_replace('value="'.$field.'"', '', $li); $li = str_replace('url('.$field.')', 'url('.$noimg.')', $li); } $template = '<ul class="_template">'.$li.'</ul>'; return '<div class="form_list">'.$template."<span class=\"btn\" form_list data-name=\"$name\"><i class=\"fa fa-upload\"></i>Add Item</span>".$ul.'</div>'; } function form_auto_img($key, $name, $val, $plc = null) { $key = $key.'['.$name.']'; is_array($val) and isset($val[$name]) and $val = $val[$name]; return form_widget_img($key, $val); } function form_auto_text($key, $name, $val, $plc = null) { $key = $key.'['.$name.']'; is_array($val) and isset($val[$name]) and $val = $val[$name]; return '<div class="form_tips"><label>'.$plc.'</label>'.form_text($key, $val, $plc).'</div>'; } function form_auto_textarea($key, $name, $val, $plc = null) { $key = $key.'['.$name.']'; is_array($val) and isset($val[$name]) and $val = $val[$name]; return '<div class="form_tips"><label>'.$plc.'</label>'.form_textarea($key, $val, $plc).'</div>'; } function form_auto_editor($key, $name, $val, $plc = null) { $key = $key.'['.$name.']'; is_array($val) and isset($val[$name]) and $val = $val[$name]; return '<div class="form_tips"><label>'.$plc.'</label>'.form_editor($key, $val, $plc).'</div>'; } function form_misc($name, $value = null, $placeholder = '') { is_array($value) and isset($value[$name]) and $value = $value[$name]; is_string($value) and $value = decode_json($value); $ul = '<ul class="form_misc sortable">'; if (!empty($value) && is_array($value)) { foreach ($value as $k => $v) { if (!isset($v['src'])) { break; } $li = '<li>'; $li .= '<b><i>x</i></b>'; $li .= '<u><i>Replace</i></u>'; $li .= '<em><img src="'.$v['src'].'" ></em>'; $li .= '<div class="txt"><input type="text" data-name="f1" value="'.$v['f1'].'" placeholder="field">'; $li .= '<input type="text" data-name="f2" value="'.$v['f2'].'" placeholder="field">'; $li .= '<input type="text" data-name="f3" value="'.$v['f3'].'" placeholder="field">'; $li .= '<input type="text" data-name="f4" value="'.$v['f4'].'" placeholder="field">'; $li .= '<input type="text" data-name="f5" value="'.$v['f5'].'" placeholder="field">'; $li .= '<input type="hidden" data-name="src" value="'.$v['src'].'" placeholder="field">'; $li .= '</div></li>'; $ul .= $li; } } $ul .= '</ul>'; return "<span class=\"btn\" form_misc data-name=\"$name\" form_misc><i class=\"fa fa-upload\"></i><input type=\"hidden\" name=\"$name\">".'Upload'.'</span>'.$ul; } function form_textarea($name, $value = null, $placeholder = null, $width = null, $ext = null) { is_array($value) and $value = isset($value[$name]) ? $value[$name] : null; $style = ''; if ($width !== null) { is_numeric($width) and $width .= 'px'; is_numeric($height) and $height .= 'px'; $style = " style=\"width: $width; height: $height; \""; } $s = "<textarea name=\"$name\" placeholder=\"$placeholder\"  class=\"form-textarea\" $style $ext>$value</textarea>"; return $s; } function form_button($value = 'submit') { return '<button class="form_button">'.$value.'</button>'; } function form_submit($value = 'submit') { return '<input class="form_submit" type="submit" value="'.$value.'">'; } function form_handle($value = '') { return '<input class="form_text" type="hidden" name="handle" value="'.$value.'">'; } function form_editor($name, $value = null, $placeholder = '', $lang = null, $width = false, $height = false) { is_array($value) and $value = isset($value[$name]) ? $value[$name] : null; isset($lang) and $name = 'data['.$lang.']['.$name.']'; $style = ''; if ($width !== false) { is_numeric($width) and $width .= 'px'; is_numeric($height) and $height .= 'px'; $style = " style=\"width: $width; height: $height; \""; } $s = "<textarea name=\"$name\" editor class=\"form-editor\" $style>$value</textarea>"; return $s; } function form_switch($name, $value = 1, $placeholder = '', $readonly = false) { is_array($value) and $value = isset($value[$name]) ? $value[$name] : 0; $readonly = $readonly ? 'readonly="readonly"' : ''; return "<input type=\"text\" name=\"$name\" value=\"$value\" $readonly form_switch \">"; } function form_type($name, $value = 'text', $placeholder = null) { $data = array( 'text' => lang('form_text'), 'textarea' => lang('form_textarea'), 'editor' => lang('form_editor'), 'date' => lang('form_date'), 'switch' => lang('form_switch'), 'radio_yes_no' => lang('form_radio_yes_no'), 'img' => lang('form_image_upload'), 'imgs' => lang('form_images_upload'), 'file' => lang('form_file_upload'), 'files' => lang('form_files_upload'), ); return form_select($name, $data, $value); } function form_auto($type, $name, $value = null, $defVal = null, $placeholder = null, $lang_id = null) { $pre = isset($lang_id) ? 'data' : 'base'; if (is_array($value)) { isset($lang_id) and $value = isset($value[$lang_id]) ? $value[$lang_id] : ''; $value = isset($value[$name]) ? $value[$name] : ''; } $name = isset($lang_id) ? '['.$lang_id.']['.$name.']' : '['.$name.']'; $name = $pre.$name; $type = 'form_'.$type; if (!function_exists($type)) { return 'NO FORM_FUN '.$type; } return $type($name, $value, $placeholder); } function form_auto_ext($type, $name, $value = null, $defVal = null, $placeholder = null, $lang_id = null) { $pre = isset($lang_id) ? 'data' : 'base'; if (is_array($value)) { isset($lang_id) and $value = isset($value[$lang_id]['ext_data']) ? $value[$lang_id]['ext_data'] : ''; $value = is_array($value) ? $value : decode_json($value); $value = isset($value[$name]) ? $value[$name] : ''; } $name = isset($lang_id) ? '['.$lang_id.'][ext_data]['.$name.']' : '[ext_data]['.$name.']'; $name = $pre.$name; $type = 'form_'.$type; if (!function_exists($type)) { return 'NO FORM_EXT_FUN'; } return $type($name, $value, $placeholder); } function form_ext($type, $name, $value = null, $defVal = null, $placeholder = null) { $types = array('text', 'textarea', 'editor', 'img', 'imgs', 'misc', 'file', 'switch'); is_array($value) and $value = isset($value['ext_data']) ? $value['ext_data'] : ''; $value = decode_json($value); $value = isset($value[$name]) ? $value[$name] : ''; $type = 'form_'.$types[$type]; $name = 'ext['.$name.']'; return $type($name, $value, $placeholder); } function form_val($name, $value = null, $defVal = null, $lang_id = null) { if (is_array($value)) { if (isset($lang_id)) { $value = isset($value[$lang_id][$name]) ? $value[$lang_id][$name] : $defVal; } else { $value = isset($value[$name]) ? $value[$name] : $defVal; } } is_numeric($value) and $value = intval($value); return $value; } function html_val($array, $key) { return isset($array[$key]) ? $array[$key] : null; } function form_array($arr, $lang = 0) { if (is_array($arr)) { foreach ($arr as $key => $value) { if (is_array($value)) { if ($lang) { foreach ($value as $k => $v) { is_array($v) and $arr[$key][$k] = encode_json($v); } } else { is_array($value) and $arr[$key] = encode_json($value); } } } } return $arr; } function form_fields($data, $keys) { is_array($keys) or $keys = array($keys); $rt = array(); foreach ($keys as $k) { isset($data[$k]) and $rt[$k] = $data[$k]; } return $rt; } function form_post() { foreach ($_POST as $key => $value) { is_array($value) and $_POST[$key] = encode_json($_POST[$key]); $key == 'created' and is_string($_POST[$key]) and $_POST[$key] = strtotime($_POST[$key]); $key == 'modify' and is_string($_POST[$key]) and $_POST[$key] = strtotime($_POST[$key]); } return $_POST; } function def_val($var, $def = "") { return empty($var) ? $def : $var; } function post_val($key, $defVal = null) { $post = $_POST; if ($pos = strpos($key, '.')) { $k1 = substr($key, 0, $pos); $k2 = substr($key, $pos + 1); if ($pos = strpos($k2, '.')) { $k21 = substr($k2, 0, $pos); $k22 = substr($k2, $pos + 1); $rt = isset($post[$k1][$k21][$k22]) ? $post[$k1][$k21][$k22] : $defVal; } else { $rt = isset($post[$k1][$k2]) ? $post[$k1][$k2] : $defVal; } } else { $rt = isset($post[$key]) ? $post[$key] : $defVal; } if (empty($rt) && !is_numeric($rt)) { $rt = $defVal; } return $rt; }; function name_value($name, $value, $defVal = null) { $rt = ''; $pos = strpos($name, '.'); if ($pos) { $name = explode('.', $name); $name1 = isset($name[0]) ? $name[0] : ''; $name2 = isset($name[1]) ? $name[1] : ''; $name3 = isset($name[2]) ? $name[2] : ''; if ($name3) { $rt = isset($value[$name1][$name2][$name3]) ? $value[$name1][$name2][$name3] : ''; } else { $rt = isset($value[$name1][$name2]) ? $value[$name1][$name2] : ''; } } else { $rt = isset($value[$name]) ? $value[$name] : ''; } if (isset($defVal)) { return $rt == '' ? $defVal : $rt; } return $rt; } function get($name, $defVal = null) { $rt = name_value($name, $_GET, $defVal); return $rt; } function post($name, $defVal = null) { $rt = name_value($name, $_POST, $defVal); return $rt; } function request($name, $defVal = null) { $rt = name_value($name, $_REQUEST, $defVal); return $rt; } function cut_words($str, $length = 80, $suffix = '...') { $str = strip_tags($str); $len = mb_strlen($str, 'utf8'); if ($len > $length) { $str = mb_substr($str, 0, $length); $str .= $suffix; } return $str; } function nav($pid = 0, $all = 0) { static $catalog; static $catalog_all; if (!isset($catalog)) { $catalog_all = table_find('catalog', array(), array('sort' => 1, 'id' => 1)); foreach ($catalog_all as $key => $value) { $catalog_all[$key]['url'] = empty($value['url2']) ? URL_PREFIX.$value['url'] : $value['url2']; } $catalog = arrlist_search($catalog_all, array('menu' => 1)); } return $all ? get_child($pid, $catalog_all) : get_child($pid, $catalog); } function web_setting($field_name = '') { static $_arr; if (!isset($_arr)) { $_arr = setting_get('website'); empty($_arr['backend_path']) and $_arr['backend_path'] = 'admin'; if (!empty($_arr['language'])) { foreach ($_arr['language'] as $key => $value) { $language[$value['f3']]['id'] = $value['f1']; $language[$value['f3']]['name'] = $value['f2']; $language[$value['f3']]['prefix'] = $value['f3']; $language[$value['f3']]['icon'] = $value['f4']; } } else { $language[''] = array('id' => 1, 'name' => 'Default', 'prefix' => '', 'icon' => ''); } $_arr['language'] = $language; } return $_arr[$field_name]; } function web_common($field_name = '') { defined('LANG_ID') or define('LANG_ID', 1); static $_arr; if (!isset($_arr)) { $_arr = setting_get('web_common'); $_arr = $_arr[LANG_ID]; } return $_arr[$field_name]; } function auto_url($url) { $url = strtolower($url); if (!empty($url) && $url != 'javascript:;') { $url = str_replace(array(' ', '&', '%', '*', '@', '(', ')', '[', ']', '__', '-'), '_', $url); $url = str_replace('__', '_', $url); $url = trim($url, "/_\n\r\t"); if (strpos($url, '#') || strpos($url, '.') || strpos($url, '?')) { $url = '/'.$url; } else { $url = '/'.$url.'/'; } $url = str_replace('//', '/', $url); } return $url; } function http_url() { $port = $_SERVER['SERVER_PORT']; $host = $_SERVER['HTTP_HOST']; $https = isset($_SERVER['HTTPS']) ? $_SERVER['HTTPS'] : 'off'; $proto = isset($_SERVER['HTTP_X_FORWARDED_PROTO']) ? $_SERVER['HTTP_X_FORWARDED_PROTO'] : ''; $path = substr($_SERVER['PHP_SELF'], 0, strrpos($_SERVER['PHP_SELF'], '/')); $http = (($port == 443) || strtolower($proto) == 'https' || ($https && $https != 'off')) ? 'https' : 'http'; return "$http://$host$path/"; } function dump($var) { echo '<pre style="position: relative;z-index: 9999999999999;background: yellow;width: 100%;padding: 10px;border: solid 1px blue;font-size: 12px;line-height: 1;">'.print_r($var, 1).'</pre>'; } function xlsx_read($file, $sheet = 0) { $xlsx = SimpleXLSX::parse($file); return $xlsx->rows($sheet); } function xlsx_write($data, $file_name = '') { $file_name = empty($file_name) ? date('Y-m-d_His') : $file_name; $file_name = $file_name.'.xlsx'; header('Content-disposition: attachment; filename="'.XLSXWriter::sanitize_filename($file_name).'"'); header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'); header('Content-Transfer-Encoding: binary'); header('Cache-Control: must-revalidate'); header('Pragma: public'); $writer = new XLSXWriter(); $writer->writeSheet($data); $writer->writeToStdOut(); exit; } function uuid() { $chars = md5(uniqid(mt_rand(), true)); $uuid = substr($chars, 0, 8).'-'; $uuid .= substr($chars, 8, 4).'-'; $uuid .= substr($chars, 12, 4).'-'; $uuid .= substr($chars, 16, 4).'-'; $uuid .= substr($chars, 20, 12); return $uuid; } function uucode() { $code = microtime(true) - strtotime('2020-02-02'); $code = sprintf('%.7f', $code); $code = str_replace('.', '', $code); return base_convert($code, 10, 36); } function get_ip() { if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) { $ip = $_SERVER['HTTP_X_FORWARDED_FOR']; } elseif (!empty($_SERVER['HTTP_CLIENT_IP'])) { $ip = $_SERVER['HTTP_CLIENT_IP']; } elseif (!empty($_SERVER['REMOTE_ADDR'])) { $ip = $_SERVER['REMOTE_ADDR']; } else { $ip = 'unknown'; } return $ip; } function http_alert($msg, $url = null, $charset = 'utf-8') { header("Content-type: text/html; charset={$charset}"); $alert_msg = "alert('$msg');"; if (empty($url)) { $go_url = 'history.go(-1);'; } else { $go_url = "window.location.href = '{$url}'"; } echo "<script>$alert_msg $go_url</script>"; exit; } function is_post() { return $_SERVER['REQUEST_METHOD'] == 'POST'; } function is_get() { return $_SERVER['REQUEST_METHOD'] == 'GET'; } if (!function_exists('is_ajax')) { function is_ajax() { if (((isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest'))) { return true; } else { return false; } } } function msg($code = null, $msg = null, $target = null) { $response = array(); if (func_num_args() == 1) { if (is_array($code)) { $response['code'] = isset($code[0]) ? $code[0] : ''; $response['msg'] = isset($code[1]) ? $code[1] : ''; $response['target'] = isset($code[2]) ? $code[2] : ''; } else { $response['code'] = 1; $response['msg'] = $code; } } else { $response['code'] = isset($code) ? $code : ''; $response['msg'] = isset($msg) ? $msg : ''; $response['target'] = isset($target) ? $target : ''; } header('content-type:application/json; charset=utf-8'); echo encode_json($response); exit; } function header_js($msg) { header('content-type:application/javascript; charset=utf-8'); echo $msg; exit; } function header_json($response) { header('content-type:application/json; charset=utf-8'); echo encode_json($response); exit; } function http_404($s = null) { header('HTTP/1.1 404 Not Found'); header('Status: 404 Not Found'); $app = new Controller(); $app->display('404'); exit; echo '<h1>404 Not Found</h1>'; if (!empty($s) && DEV) { echo '<p style="background: yellow;padding:10px;">'.$s.'</p>'; } exit; } function http_redirect($url) { header('Location: '.$url); exit; } function http_location($url) { header('Location: '.$url); exit; } function session_set($key, $value) { isset($_SESSION) or session_start(); if ($pos = strpos($key, '.')) { $k1 = substr($key, 0, $pos); $k2 = substr($key, $pos + 1); isset($_SESSION[$k1]) and is_array($_SESSION[$k1]) or $_SESSION[$k1] = array(); if ($pos = strpos($k2, '.')) { $k21 = substr($k2, 0, $pos); $k22 = substr($k2, $pos + 1); isset($_SESSION[$k1][$k21]) and is_array($_SESSION[$k1][$k21]) or $_SESSION[$k1][$k21] = array(); $_SESSION[$k1][$k21][$k22] = $value; } else { $_SESSION[$k1][$k2] = $value; } } else { $_SESSION[$key] = $value; } } function session_get($key, $defVal = null) { isset($_SESSION) or session_start(); if ($pos = strpos($key, '.')) { $k1 = substr($key, 0, $pos); $k2 = substr($key, $pos + 1); if ($pos = strpos($k2, '.')) { $k21 = substr($k2, 0, $pos); $k22 = substr($k2, $pos + 1); return isset($_SESSION[$k1][$k21][$k22]) ? $_SESSION[$k1][$k21][$k22] : $defVal; } else { return isset($_SESSION[$k1][$k2]) ? $_SESSION[$k1][$k2] : $defVal; } } else { return isset($_SESSION[$key]) ? $_SESSION[$key] : $defVal; } } function cookie_set($key, $value, $day = 7) { if ($pos = strpos($key, '.')) { $k1 = substr($key, 0, $pos); $k2 = substr($key, $pos + 1); $key = $k1; $cookie = decrypt($_COOKIE[$k1]); is_array($cookie) or $cookie = array(); if ($pos = strpos($k2, '.')) { $k21 = substr($k2, 0, $pos); $k22 = substr($k2, $pos + 1); is_array($cookie[$k21]) or $cookie[$k21] = array(); $cookie[$k21][$k22] = $value; } else { $cookie[$k2] = $value; } } else { $cookie = $value; } $cookie = encrypt($cookie); $expire = time() + 60 * 60 * 24 * $day; setcookie($key, $cookie, $expire, '/'); } function cookie_get($key, $defVal = null) { if ($pos = strpos($key, '.')) { $k1 = substr($key, 0, $pos); $k2 = substr($key, $pos + 1); $cookie = decrypt($_COOKIE[$k1]); $key = $k1; if ($pos = strpos($k2, '.')) { $k21 = substr($k2, 0, $pos); $k22 = substr($k2, $pos + 1); } } if (!empty($_COOKIE[$key])) { $value = decrypt($_COOKIE[$key]); if (isset($k22)) { return empty($value[$k21][$k22]) ? $defVal : $value[$k21][$k22]; } elseif (isset($k1)) { return empty($value[$k2]) ? $defVal : $value[$k2]; } else { return $value; } } return $defVal; } function rand_string($n = 4) { $str = '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'; $len = strlen($str); $return = ''; for ($i = 0; $i < $n; $i++) { $r = mt_rand(1, $len); $return .= $str[$r - 1]; } return $return; } function in_string($s, $str) { if (!$s || !$str) { return false; } $s = ",$s,"; $str = ",$str,"; return strpos($str, $s) !== false; } function pager($url, $totalnum, $page, $pagesize = 20) { $totalpage = ceil($totalnum / $pagesize); if ($totalpage < 2) { return ''; } $page = min($totalpage, $page); $s = ''; $page > 1 and $s .= '<li><a href="'.str_replace('{page}', $page - 1, $url).'">上一页</a></li>'; $s .= " $page / $totalpage "; $totalnum >= $pagesize and $page != $totalpage and $s .= '<li><a href="'.str_replace('{page}', $page + 1, $url).'">下一页</a></li>'; return $s; } function pagination($url, $totalnum, $page, $pagesize = 20) { $tpl = '<a href="{url}" class="{active}">{text}</a>'; $totalpage = ceil($totalnum / $pagesize); if ($totalpage < 2) { return ''; } $page = min($totalpage, $page); $shownum = 5; $start = max(1, $page - $shownum); $end = min($totalpage, $page + $shownum); $right = $page + $shownum - $totalpage; $right > 0 && $start = max(1, $start -= $right); $left = $page - $shownum; $left < 0 && $end = min($totalpage, $end -= $left); $s = ''; $page != 1 && $s .= str_replace(array('{url}', '{page}', '{text}', '{active}'), array($url, $page - 1, '<', ''), $tpl); $start > 1 && $s .= str_replace(array('{url}', '{page}', '{text}', '{active}'), array($url, 1, '1 '.($start > 2 ? '...' : ''), ''), $tpl); for ($i = $start; $i <= $end; $i++) { $s .= str_replace(array('{url}', '{page}', '{text}', '{active}'), array($url, $i, $i, $i == $page ? ' active' : ''), $tpl); } $end != $totalpage && $s .= str_replace(array('{url}', '{page}', '{text}', '{active}'), array($url, $totalpage, ($totalpage - $end > 1 ? '...' : '').$totalpage, ''), $tpl); $page != $totalpage && $s .= str_replace(array('{url}', '{page}', '{text}', '{active}'), array($url, $page + 1, '>', ''), $tpl); return $s; } function gen_password() { $up = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'; $low = 'abcdefghijklmnopqrstuvwxyz'; $num = '12345678901234567890123456'; $mark = '~!@#$%^&*_-+=`|\(){}[]:;!@'; $str = ''; $str .= substr($up, mt_rand(0, 24), 1); $str .= substr($low, mt_rand(0, 24), 1); $str .= substr($num, mt_rand(0, 24), 1); $str .= substr($mark, mt_rand(0, 24), 1); $_ = $up.$low.$num.$mark; $len = strlen($_); for ($i = 0; $i < 3; $i++) { $r = mt_rand(1, $len); $str .= $_[$r - 1]; } return str_shuffle($str); } function close_tag($html) { preg_match_all('#<([a-z]+)(?: .*)?(?<![/|/ ])>#iU', $html, $result); $openedtags = $result[1]; preg_match_all('#</([a-z]+)>#iU', $html, $result); $closedtags = $result[1]; $len_opened = count($openedtags); if (count($closedtags) == $len_opened) { return $html; } $openedtags = array_reverse($openedtags); for ($i = 0; $i < $len_opened; $i++) { if (!in_array($openedtags[$i], $closedtags)) { $html .= '</'.$openedtags[$i].'>'; } else { unset($closedtags[array_search($openedtags[$i], $closedtags)]); } } return $html; } function diff_date($date1, $date2) { $time1 = strtotime($date1); $time2 = strtotime($date2); $diff = abs($time1 - $time2); $rt['y'] = 0; $rt['m'] = 0; $rt['d'] = 0; $rt['h'] = 0; $rt['i'] = 0; $rt['s'] = 0; if ($diff >= 31556926) { $rt['y'] = floor($diff / 31556926); $diff = ($diff % 31556926); } if ($diff >= 2592000) { $rt['m'] = floor($diff / 2592000); $diff = ($diff % 2592000); } if ($diff >= 86400) { $rt['d'] = floor($diff / 86400); $diff = ($diff % 86400); } if ($diff >= 3600) { $rt['h'] = floor($diff / 3600); $diff = ($diff % 3600); } if ($diff >= 60) { $rt['i'] = floor($diff / 60); $diff = ($diff % 60); } $rt['s'] = floor($diff); return $rt; };class SimpleXLSX { public static $CF = [ 0 => 'General', 1 => '0', 2 => '0.00', 3 => '#,##0', 4 => '#,##0.00', 9 => '0%', 10 => '0.00%', 11 => '0.00E+00', 12 => '# ?/?', 13 => '# ??/??', 14 => 'mm-dd-yy', 15 => 'd-mmm-yy', 16 => 'd-mmm', 17 => 'mmm-yy', 18 => 'h:mm AM/PM', 19 => 'h:mm:ss AM/PM', 20 => 'h:mm', 21 => 'h:mm:ss', 22 => 'm/d/yy h:mm', 37 => '#,##0 ;(#,##0)', 38 => '#,##0 ;[Red](#,##0)', 39 => '#,##0.00;(#,##0.00)', 40 => '#,##0.00;[Red](#,##0.00)', 44 => '_("$"* #,##0.00_);_("$"* \(#,##0.00\);_("$"* "-"??_);_(@_)', 45 => 'mm:ss', 46 => '[h]:mm:ss', 47 => 'mmss.0', 48 => '##0.0E+0', 49 => '@', 27 => '[$-404]e/m/d', 30 => 'm/d/yy', 36 => '[$-404]e/m/d', 50 => '[$-404]e/m/d', 57 => '[$-404]e/m/d', 59 => 't0', 60 => 't0.00', 61 => 't#,##0', 62 => 't#,##0.00', 67 => 't0%', 68 => 't0.00%', 69 => 't# ?/?', 70 => 't# ??/??', ]; public $cellFormats = []; public $datetimeFormat = 'Y-m-d H:i:s'; public $debug; private $sheets; private $sheetNames = []; private $sheetFiles = []; private $styles; private $hyperlinks; private $package; private $sharedstrings; private $date1904 = 0; private $errno = 0; private $error = false; public function __construct($filename = null, $is_data = null, $debug = null) { if ($debug !== null) { $this->debug = $debug; } $this->package = [ 'filename' => '', 'mtime' => 0, 'size' => 0, 'comment' => '', 'entries' => [], ]; if ($filename && $this->_unzip($filename, $is_data)) { $this->_parse(); } } public static function parseFile($filename, $debug = false) { return self::parse($filename, false, $debug); } public static function parseData($data, $debug = false) { return self::parse($data, true, $debug); } public static function parse($filename, $is_data = false, $debug = false) { $xlsx = new self(); $xlsx->debug = $debug; if ($xlsx->_unzip($filename, $is_data)) { $xlsx->_parse(); } if ($xlsx->success()) { return $xlsx; } self::parseError($xlsx->error()); self::parseErrno($xlsx->errno()); return false; } public static function parseError($set = false) { static $error = false; return $set ? $error = $set : $error; } public static function parseErrno($set = false) { static $errno = false; return $set ? $errno = $set : $errno; } private function _unzip($filename, $is_data = false) { if ($is_data) { $this->package['filename'] = 'default.xlsx'; $this->package['mtime'] = time(); $this->package['size'] = $this->_strlen($filename); $vZ = $filename; } else { if (!is_readable($filename)) { $this->error(1, 'File not found '.$filename); return false; } $this->package['filename'] = $filename; $this->package['mtime'] = filemtime($filename); $this->package['size'] = filesize($filename); $vZ = file_get_contents($filename); } $aE = explode("\x50\x4b\x03\x04", $vZ); array_shift($aE); $aEL = count($aE); if ($aEL === 0) { $this->error(2, 'Unknown archive format'); return false; } $last = $aE[$aEL - 1]; $last = explode("\x50\x4b\x05\x06", $last); if (count($last) !== 2) { $this->error(2, 'Unknown archive format'); return false; } $last = explode("\x50\x4b\x01\x02", $last[0]); if (count($last) < 2) { $this->error(2, 'Unknown archive format'); return false; } $aE[$aEL - 1] = $last[0]; foreach ($aE as $vZ) { $aI = []; $aI['E'] = 0; $aI['EM'] = ''; $aP = unpack('v1VN/v1GPF/v1CM/v1FT/v1FD/V1CRC/V1CS/V1UCS/v1FNL/v1EFL', $vZ); $bE = false; $nF = $aP['FNL']; $mF = $aP['EFL']; if ($aP['GPF'] & 0x0008) { $aP1 = unpack('V1CRC/V1CS/V1UCS', $this->_substr($vZ, -12)); $aP['CRC'] = $aP1['CRC']; $aP['CS'] = $aP1['CS']; $aP['UCS'] = $aP1['UCS']; $vZ = $this->_substr($vZ, 0, -12); if ($this->_substr($vZ, -4) === "\x50\x4b\x07\x08") { $vZ = $this->_substr($vZ, 0, -4); } } $aI['N'] = $this->_substr($vZ, 26, $nF); $aI['N'] = str_replace('\\', '/', $aI['N']); if ($this->_substr($aI['N'], -1) === '/') { continue; } $aI['P'] = dirname($aI['N']); $aI['P'] = ($aI['P'] === '.') ? '' : $aI['P']; $aI['N'] = basename($aI['N']); $vZ = $this->_substr($vZ, 26 + $nF + $mF); if ($this->_strlen($vZ) !== (int) $aP['CS']) { $aI['E'] = 1; $aI['EM'] = 'Compressed size is not equal with the value in header information.'; } elseif ($bE) { $aI['E'] = 5; $aI['EM'] = 'File is encrypted, which is not supported from this class.'; } else { switch ($aP['CM']) { case 0: break; case 8: $vZ = gzinflate($vZ); break; case 12: if (extension_loaded('bz2')) { $vZ = bzdecompress($vZ); } else { $aI['E'] = 7; $aI['EM'] = 'PHP BZIP2 extension not available.'; } break; default: $aI['E'] = 6; $aI['EM'] = "De-/Compression method {$aP['CM']} is not supported."; } if (!$aI['E']) { if ($vZ === false) { $aI['E'] = 2; $aI['EM'] = 'Decompression of data failed.'; } elseif ($this->_strlen($vZ) !== (int) $aP['UCS']) { $aI['E'] = 3; $aI['EM'] = 'Uncompressed size is not equal with the value in header information.'; } elseif (crc32($vZ) !== $aP['CRC']) { $aI['E'] = 4; $aI['EM'] = 'CRC32 checksum is not equal with the value in header information.'; } } } $aI['D'] = $vZ; $aI['T'] = mktime(($aP['FT'] & 0xf800) >> 11, ($aP['FT'] & 0x07e0) >> 5, ($aP['FT'] & 0x001f) << 1, ($aP['FD'] & 0x01e0) >> 5, $aP['FD'] & 0x001f, (($aP['FD'] & 0xfe00) >> 9) + 1980); $this->package['entries'][] = [ 'data' => $aI['D'], 'error' => $aI['E'], 'error_msg' => $aI['EM'], 'name' => $aI['N'], 'path' => $aI['P'], 'time' => $aI['T'], ]; } return true; } public function error($num = null, $str = null) { if ($num) { $this->errno = $num; $this->error = $str; if ($this->debug) { trigger_error(__CLASS__.': '.$this->error, E_USER_WARNING); } } return $this->error; } public function errno() { return $this->errno; } private function _parse() { $this->sharedstrings = []; $this->sheets = []; if ($relations = $this->getEntryXML('_rels/.rels')) { foreach ($relations->Relationship as $rel) { $rel_type = basename(trim((string) $rel['Type'])); $rel_target = $this->_getTarget('', (string) $rel['Target']); if ($rel_type === 'officeDocument' && $workbook = $this->getEntryXML($rel_target)) { $index_rId = []; $index = 0; foreach ($workbook->sheets->sheet as $s) { $this->sheetNames[$index] = (string) $s['name']; $index_rId[$index] = (string) $s['id']; $index++; } if ((int) $workbook->workbookPr['date1904'] === 1) { $this->date1904 = 1; } if ($workbookRelations = $this->getEntryXML(dirname($rel_target).'/_rels/workbook.xml.rels')) { foreach ($workbookRelations->Relationship as $workbookRelation) { $wrel_type = basename(trim((string) $workbookRelation['Type'])); $wrel_path = $this->_getTarget(dirname($rel_target), (string) $workbookRelation['Target']); if (!$this->entryExists($wrel_path)) { continue; } if ($wrel_type === 'worksheet') { if ($sheet = $this->getEntryXML($wrel_path)) { $index = array_search((string) $workbookRelation['Id'], $index_rId, false); $this->sheets[$index] = $sheet; $this->sheetFiles[$index] = $wrel_path; } } elseif ($wrel_type === 'sharedStrings') { if ($sharedStrings = $this->getEntryXML($wrel_path)) { foreach ($sharedStrings->si as $val) { if (isset($val->t)) { $this->sharedstrings[] = (string) $val->t; } elseif (isset($val->r)) { $this->sharedstrings[] = $this->_parseRichText($val); } } } } elseif ($wrel_type === 'styles') { $this->styles = $this->getEntryXML($wrel_path); $nf = []; if ($this->styles->numFmts->numFmt !== null) { foreach ($this->styles->numFmts->numFmt as $v) { $nf[(int) $v['numFmtId']] = (string) $v['formatCode']; } } if ($this->styles->cellXfs->xf !== null) { foreach ($this->styles->cellXfs->xf as $v) { $v = (array) $v->attributes(); $v['format'] = ''; if (isset($v['@attributes']['numFmtId'])) { $v = $v['@attributes']; $fid = (int) $v['numFmtId']; if (isset($nf[$fid])) { $v['format'] = $nf[$fid]; } elseif (isset(self::$CF[$fid])) { $v['format'] = self::$CF[$fid]; } } $this->cellFormats[] = $v; } } } } break; } } } } if (count($this->sheets)) { ksort($this->sheets); return true; } return false; } public function getEntryXML($name) { if ($entry_xml = $this->getEntryData($name)) { $entry_xml = trim($entry_xml); $entry_xml = preg_replace('/xmlns[^=]*="[^"]*"/i', '', $entry_xml); $entry_xml = preg_replace('/[a-zA-Z0-9]+:([a-zA-Z0-9]+="[^"]+")/', '$1$2', $entry_xml); $entry_xml = preg_replace('/<[a-zA-Z0-9]+:([^>]+)>/', '<$1>', $entry_xml); $entry_xml = preg_replace('/<\/[a-zA-Z0-9]+:([^>]+)>/', '</$1>', $entry_xml); if (strpos($name, '/sheet')) { $entry_xml = preg_replace('/<row[^>]+>\s*(<c[^\/]+\/>\s*)+<\/row>/', '', $entry_xml, -1, $cnt); $entry_xml = preg_replace('/<row[^\/>]*\/>/', '', $entry_xml, -1, $cnt2); $entry_xml = preg_replace('/<row[^>]*><\/row>/', '', $entry_xml, -1, $cnt3); if ($cnt || $cnt2 || $cnt3) { $entry_xml = preg_replace('/<dimension[^\/]+\/>/', '', $entry_xml); } } if (LIBXML_VERSION < 20900) { $_old = libxml_disable_entity_loader(); } $entry_xmlobj = simplexml_load_string($entry_xml); if (LIBXML_VERSION < 20900) { libxml_disable_entity_loader($_old); } if ($entry_xmlobj) { return $entry_xmlobj; } $e = libxml_get_last_error(); if ($e) { $this->error(3, 'XML-entry '.$name.' parser error '.$e->message.' line '.$e->line); } } else { $this->error(4, 'XML-entry not found '.$name); } return false; } public function getEntryData($name) { $name = ltrim(str_replace('\\', '/', $name), '/'); $dir = $this->_strtoupper(dirname($name)); $name = $this->_strtoupper(basename($name)); foreach ($this->package['entries'] as $entry) { if ($this->_strtoupper($entry['path']) === $dir && $this->_strtoupper($entry['name']) === $name) { return $entry['data']; } } $this->error(5, 'Entry not found '.($dir ? $dir.'/' : '').$name); return false; } public function entryExists($name) { $dir = $this->_strtoupper(dirname($name)); $name = $this->_strtoupper(basename($name)); foreach ($this->package['entries'] as $entry) { if ($this->_strtoupper($entry['path']) === $dir && $this->_strtoupper($entry['name']) === $name) { return true; } } return false; } private function _parseRichText($is = null) { $value = []; if (isset($is->t)) { $value[] = (string) $is->t; } elseif (isset($is->r)) { foreach ($is->r as $run) { $value[] = (string) $run->t; } } return implode('', $value); } public function success() { return !$this->error; } public function rows($worksheetIndex = 0) { if (($ws = $this->worksheet($worksheetIndex)) === false) { return false; } $dim = $this->dimension($worksheetIndex); $numCols = $dim[0]; $numRows = $dim[1]; $emptyRow = []; for ($i = 0; $i < $numCols; $i++) { $emptyRow[] = ''; } $rows = []; for ($i = 0; $i < $numRows; $i++) { $rows[] = $emptyRow; } $curR = 0; foreach ($ws->sheetData->row as $row) { $curC = 0; foreach ($row->c as $c) { $idx = $this->getIndex((string) $c['r']); $x = $idx[0]; $y = $idx[1]; if ($x > -1) { $curC = $x; $curR = $y; } $rows[$curR][$curC] = $this->value($c); $curC++; } $curR++; } return $rows; } public function rowsEx($worksheetIndex = 0) { if (($ws = $this->worksheet($worksheetIndex)) === false) { return false; } $rows = []; $dim = $this->dimension($worksheetIndex); $numCols = $dim[0]; $numRows = $dim[1]; for ($y = 0; $y < $numRows; $y++) { for ($x = 0; $x < $numCols; $x++) { $c = ''; for ($k = $x; $k >= 0; $k = (int) ($k / 26) - 1) { $c = chr($k % 26 + 65).$c; } $rows[$y][$x] = [ 'type' => '', 'name' => $c.($y + 1), 'value' => '', 'href' => '', 'f' => '', 'format' => '', 'r' => $y, ]; } } $curR = 0; foreach ($ws->sheetData->row as $row) { $r_idx = (int) $row['r']; $curC = 0; foreach ($row->c as $c) { $r = (string) $c['r']; $t = (string) $c['t']; $s = (int) $c['s']; $idx = $this->getIndex($r); $x = $idx[0]; $y = $idx[1]; if ($x > -1) { $curC = $x; $curR = $y; } if ($s > 0 && isset($this->cellFormats[$s])) { $format = $this->cellFormats[$s]['format']; } else { $format = ''; } $rows[$curR][$curC] = [ 'type' => $t, 'name' => (string) $c['r'], 'value' => $this->value($c), 'href' => $this->href($worksheetIndex, $c), 'f' => (string) $c->f, 'format' => $format, 'r' => $r_idx, ]; $curC++; } $curR++; } return $rows; } public function toHTML($worksheetIndex = 0) { $s = '<table class=excel>'; foreach ($this->rows($worksheetIndex) as $r) { $s .= '<tr>'; foreach ($r as $c) { $s .= '<td nowrap>'.($c === '' ? '&nbsp' : htmlspecialchars($c, ENT_QUOTES)).'</td>'; } $s .= "</tr>\r\n"; } $s .= '</table>'; return $s; } public function worksheet($worksheetIndex = 0) { if (isset($this->sheets[$worksheetIndex])) { $ws = $this->sheets[$worksheetIndex]; if (!isset($this->hyperlinks[$worksheetIndex]) && isset($ws->hyperlinks)) { $this->hyperlinks[$worksheetIndex] = []; $sheet_rels = str_replace('worksheets', 'worksheets/_rels', $this->sheetFiles[$worksheetIndex]).'.rels'; $link_ids = []; if ($rels = $this->getEntryXML($sheet_rels)) { foreach ($rels->Relationship as $rel) { $rel_type = basename(trim((string) $rel['Type'])); if ($rel_type === 'hyperlink') { $rel_id = (string) $rel['Id']; $rel_target = (string) $rel['Target']; $link_ids[$rel_id] = $rel_target; } } foreach ($ws->hyperlinks->hyperlink as $hyperlink) { $ref = (string) $hyperlink['ref']; if ($this->_strpos($ref, ':') > 0) { $ref = explode(':', $ref); $ref = $ref[0]; } $this->hyperlinks[$worksheetIndex][$ref] = $link_ids[(string) $hyperlink['id']]; } } } return $ws; } $this->error(6, 'Worksheet not found '.$worksheetIndex); return false; } public function dimension($worksheetIndex = 0) { if (($ws = $this->worksheet($worksheetIndex)) === false) { return [0, 0]; } $ref = (string) $ws->dimension['ref']; if ($this->_strpos($ref, ':') !== false) { $d = explode(':', $ref); $idx = $this->getIndex($d[1]); return [$idx[0] + 1, $idx[1] + 1]; } if ($ref !== '') { $index = $this->getIndex($ref); return [$index[0] + 1, $index[1] + 1]; } $maxC = $maxR = 0; foreach ($ws->sheetData->row as $row) { foreach ($row->c as $c) { $idx = $this->getIndex((string) $c['r']); $x = $idx[0]; $y = $idx[1]; if ($x > 0) { if ($x > $maxC) { $maxC = $x; } if ($y > $maxR) { $maxR = $y; } } } } return [$maxC + 1, $maxR + 1]; } public function getIndex($cell = 'A1') { if (preg_match('/([A-Z]+)(\d+)/', $cell, $m)) { $col = $m[1]; $row = $m[2]; $colLen = $this->_strlen($col); $index = 0; for ($i = $colLen - 1; $i >= 0; $i--) { $index += (ord($col[$i]) - 64) * pow(26, $colLen - $i - 1); } return [$index - 1, $row - 1]; } return [-1, -1]; } public function value($cell) { $dataType = (string) $cell['t']; if ($dataType === '' || $dataType === 'n') { $s = (int) $cell['s']; if ($s > 0 && isset($this->cellFormats[$s])) { if (array_key_exists('format', $this->cellFormats[$s])) { $format = $this->cellFormats[$s]['format']; if (preg_match('/[mM]/', $format)) { $dataType = 'd'; } } else { $dataType = 's'; } } } $value = ''; switch ($dataType) { case 's': if ((string) $cell->v !== '') { $value = $this->sharedstrings[(int) $cell->v]; } break; case 'b': $value = (string) $cell->v; if ($value === '0') { $value = false; } elseif ($value === '1') { $value = true; } else { $value = (bool) $cell->v; } break; case 'inlineStr': $value = $this->_parseRichText($cell->is); break; case 'e': if ((string) $cell->v !== '') { $value = (string) $cell->v; } break; case 'd': if (!empty($cell->v)) { $value = $this->datetimeFormat ? gmdate($this->datetimeFormat, $this->unixstamp((float) $cell->v)) : (float) $cell->v; } break; default: $value = (string) $cell->v; if (is_numeric($value) && $dataType !== 's') { if ($value == (int) $value) { $value = (int) $value; } elseif ($value == (float) $value) { $value = (float) $value; } } } return $value; } public function unixstamp($excelDateTime) { $d = floor($excelDateTime); $t = $excelDateTime - $d; if ($this->date1904) { $d += 1462; } $t = (abs($d) > 0) ? ($d - 25569) * 86400 + round($t * 86400) : round($t * 86400); return (int) $t; } public function getCell($worksheetIndex = 0, $cell = 'A1') { if (($ws = $this->worksheet($worksheetIndex)) === false) { return false; } $idx = is_array($cell) ? $cell : $this->getIndex((string) $cell); $C = $idx[0]; $R = $idx[1]; $curR = 0; foreach ($ws->sheetData->row as $row) { $curC = 0; foreach ($row->c as $c) { $idx = $this->getIndex((string) $c['r']); $x = $idx[0]; $y = $idx[1]; if ($x > 0) { $curC = $x; $curR = $y; } if ($curR === $R && $curC === $C) { return $this->value($c); } if ($curR > $R) { return null; } $curC++; } $curR++; } return null; } public function href($worksheetIndex, $cell) { $ref = (string) $cell['r']; return isset($this->hyperlinks[$worksheetIndex][$ref]) ? $this->hyperlinks[$worksheetIndex][$ref] : ''; } public function sheets() { return $this->sheets; } public function sheetsCount() { return count($this->sheets); } public function sheetName($worksheetIndex) { if (isset($this->sheetNames[$worksheetIndex])) { return $this->sheetNames[$worksheetIndex]; } return false; } public function sheetNames() { return $this->sheetNames; } public function getStyles() { return $this->styles; } public function getPackage() { return $this->package; } public function setDateTimeFormat($value) { $this->datetimeFormat = is_string($value) ? $value : false; } private function _strlen($str) { return (ini_get('mbstring.func_overload') & 2) ? mb_strlen($str, '8bit') : strlen($str); } private function _strpos($haystack, $needle, $offset = 0) { return (ini_get('mbstring.func_overload') & 2) ? mb_strpos($haystack, $needle, $offset, '8bit') : strpos($haystack, $needle, $offset); } private function _strtoupper($str) { return (ini_get('mbstring.func_overload') & 2) ? mb_strtoupper($str, '8bit') : strtoupper($str); } private function _substr($str, $start, $length = null) { return (ini_get('mbstring.func_overload') & 2) ? mb_substr($str, $start, ($length === null) ? mb_strlen($str, '8bit') : $length, '8bit') : substr($str, $start, ($length === null) ? strlen($str) : $length); } private function _getTarget($base, $target) { $target = trim($target); if (strpos($target, '/') === 0) { return $this->_substr($target, 1); } $target = ($base ? $base.'/' : '').$target; $parts = explode('/', $target); $abs = []; foreach ($parts as $p) { if ('.' === $p) { continue; } if ('..' === $p) { array_pop($abs); } else { $abs[] = $p; } } return implode('/', $abs); } };function encrypt($data, $key='@simphp') { $data = encode_json($data); $key = md5($key); $x = 0; $len = strlen($data); $l = strlen($key); $char = ''; for ($i = 0; $i < $len; $i++) { if ($x == $l) { $x = 0; } $char .= $key[$x]; $x++; } $str = ''; for ($i = 0; $i < $len; $i++) { $str .= chr(ord($data[$i]) + (ord($char[$i])) % 256); } return base64_encode($str); } function decrypt($data, $key='@simphp') { $key = md5($key); $x = 0; $data = base64_decode($data); $len = strlen($data); $l = strlen($key); $char = ''; for ($i = 0; $i < $len; $i++) { if ($x == $l) { $x = 0; } $char .= substr($key, $x, 1); $x++; } $str = ''; for ($i = 0; $i < $len; $i++) { if (ord(substr($data, $i, 1)) < ord(substr($char, $i, 1))) { $str .= chr((ord(substr($data, $i, 1)) + 256) - ord(substr($char, $i, 1))); } else { $str .= chr(ord(substr($data, $i, 1)) - ord(substr($char, $i, 1))); } } $str = decode_json($str); return $str; } ?>